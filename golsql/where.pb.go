// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.10.1
// source: where.proto

package golsql

import (
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type Comparator int32

const (
	// Invalid, only used as a default in error states
	Comparator_UNKNOWN_COMPARATOR    Comparator = 0
	Comparator_EQUAL                 Comparator = 1
	Comparator_FUZZY_EQUAL           Comparator = 2
	Comparator_GREATER_THAN          Comparator = 3
	Comparator_LESS_THAN             Comparator = 4
	Comparator_GREATER_THAN_OR_EQUAL Comparator = 5
	Comparator_LESS_THAN_OR_EQUAL    Comparator = 6
	Comparator_IS_NULL               Comparator = 7
)

// Enum value maps for Comparator.
var (
	Comparator_name = map[int32]string{
		0: "UNKNOWN_COMPARATOR",
		1: "EQUAL",
		2: "FUZZY_EQUAL",
		3: "GREATER_THAN",
		4: "LESS_THAN",
		5: "GREATER_THAN_OR_EQUAL",
		6: "LESS_THAN_OR_EQUAL",
		7: "IS_NULL",
	}
	Comparator_value = map[string]int32{
		"UNKNOWN_COMPARATOR":    0,
		"EQUAL":                 1,
		"FUZZY_EQUAL":           2,
		"GREATER_THAN":          3,
		"LESS_THAN":             4,
		"GREATER_THAN_OR_EQUAL": 5,
		"LESS_THAN_OR_EQUAL":    6,
		"IS_NULL":               7,
	}
)

func (x Comparator) Enum() *Comparator {
	p := new(Comparator)
	*p = x
	return p
}

func (x Comparator) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Comparator) Descriptor() protoreflect.EnumDescriptor {
	return file_where_proto_enumTypes[0].Descriptor()
}

func (Comparator) Type() protoreflect.EnumType {
	return &file_where_proto_enumTypes[0]
}

func (x Comparator) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Comparator.Descriptor instead.
func (Comparator) EnumDescriptor() ([]byte, []int) {
	return file_where_proto_rawDescGZIP(), []int{0}
}

type GroupOperator int32

const (
	// Invalid, only used as a default in error states
	GroupOperator_UNKNOWN_GROUPOPERATOR GroupOperator = 0
	GroupOperator_AND                   GroupOperator = 1
	GroupOperator_OR                    GroupOperator = 2
	GroupOperator_XOR                   GroupOperator = 3
)

// Enum value maps for GroupOperator.
var (
	GroupOperator_name = map[int32]string{
		0: "UNKNOWN_GROUPOPERATOR",
		1: "AND",
		2: "OR",
		3: "XOR",
	}
	GroupOperator_value = map[string]int32{
		"UNKNOWN_GROUPOPERATOR": 0,
		"AND":                   1,
		"OR":                    2,
		"XOR":                   3,
	}
)

func (x GroupOperator) Enum() *GroupOperator {
	p := new(GroupOperator)
	*p = x
	return p
}

func (x GroupOperator) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GroupOperator) Descriptor() protoreflect.EnumDescriptor {
	return file_where_proto_enumTypes[1].Descriptor()
}

func (GroupOperator) Type() protoreflect.EnumType {
	return &file_where_proto_enumTypes[1]
}

func (x GroupOperator) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GroupOperator.Descriptor instead.
func (GroupOperator) EnumDescriptor() ([]byte, []int) {
	return file_where_proto_rawDescGZIP(), []int{1}
}

type Group struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Elements       []*GroupElement `protobuf:"bytes,1,rep,name=elements,proto3" json:"elements,omitempty"`
	NegateOperator bool            `protobuf:"varint,2,opt,name=negate_operator,json=negateOperator,proto3" json:"negate_operator,omitempty"`
	Operator       GroupOperator   `protobuf:"varint,3,opt,name=operator,proto3,enum=GroupOperator" json:"operator,omitempty"`
}

func (x *Group) Reset() {
	*x = Group{}
	if protoimpl.UnsafeEnabled {
		mi := &file_where_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Group) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Group) ProtoMessage() {}

func (x *Group) ProtoReflect() protoreflect.Message {
	mi := &file_where_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Group.ProtoReflect.Descriptor instead.
func (*Group) Descriptor() ([]byte, []int) {
	return file_where_proto_rawDescGZIP(), []int{0}
}

func (x *Group) GetElements() []*GroupElement {
	if x != nil {
		return x.Elements
	}
	return nil
}

func (x *Group) GetNegateOperator() bool {
	if x != nil {
		return x.NegateOperator
	}
	return false
}

func (x *Group) GetOperator() GroupOperator {
	if x != nil {
		return x.Operator
	}
	return GroupOperator_UNKNOWN_GROUPOPERATOR
}

type GroupElement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Element:
	//	*GroupElement_Field
	//	*GroupElement_Group
	Element isGroupElement_Element `protobuf_oneof:"element"`
}

func (x *GroupElement) Reset() {
	*x = GroupElement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_where_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupElement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupElement) ProtoMessage() {}

func (x *GroupElement) ProtoReflect() protoreflect.Message {
	mi := &file_where_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupElement.ProtoReflect.Descriptor instead.
func (*GroupElement) Descriptor() ([]byte, []int) {
	return file_where_proto_rawDescGZIP(), []int{1}
}

func (m *GroupElement) GetElement() isGroupElement_Element {
	if m != nil {
		return m.Element
	}
	return nil
}

func (x *GroupElement) GetField() *Field {
	if x, ok := x.GetElement().(*GroupElement_Field); ok {
		return x.Field
	}
	return nil
}

func (x *GroupElement) GetGroup() *Group {
	if x, ok := x.GetElement().(*GroupElement_Group); ok {
		return x.Group
	}
	return nil
}

type isGroupElement_Element interface {
	isGroupElement_Element()
}

type GroupElement_Field struct {
	Field *Field `protobuf:"bytes,101,opt,name=field,proto3,oneof"`
}

type GroupElement_Group struct {
	Group *Group `protobuf:"bytes,102,opt,name=group,proto3,oneof"`
}

func (*GroupElement_Field) isGroupElement_Element() {}

func (*GroupElement_Group) isGroupElement_Element() {}

type Field struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Column           *ColumnID  `protobuf:"bytes,1,opt,name=column,proto3" json:"column,omitempty"`
	NegateComparator bool       `protobuf:"varint,2,opt,name=negate_comparator,json=negateComparator,proto3" json:"negate_comparator,omitempty"`
	Comparator       Comparator `protobuf:"varint,3,opt,name=comparator,proto3,enum=Comparator" json:"comparator,omitempty"`
	// Types that are assignable to Value:
	//	*Field_StringValue
	//	*Field_Int64Value
	//	*Field_Uint64Value
	//	*Field_DoubleValue
	//	*Field_BoolValue
	//	*Field_BytesValue
	//	*Field_TimeValue
	Value isField_Value `protobuf_oneof:"value"`
}

func (x *Field) Reset() {
	*x = Field{}
	if protoimpl.UnsafeEnabled {
		mi := &file_where_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Field) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Field) ProtoMessage() {}

func (x *Field) ProtoReflect() protoreflect.Message {
	mi := &file_where_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Field.ProtoReflect.Descriptor instead.
func (*Field) Descriptor() ([]byte, []int) {
	return file_where_proto_rawDescGZIP(), []int{2}
}

func (x *Field) GetColumn() *ColumnID {
	if x != nil {
		return x.Column
	}
	return nil
}

func (x *Field) GetNegateComparator() bool {
	if x != nil {
		return x.NegateComparator
	}
	return false
}

func (x *Field) GetComparator() Comparator {
	if x != nil {
		return x.Comparator
	}
	return Comparator_UNKNOWN_COMPARATOR
}

func (m *Field) GetValue() isField_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *Field) GetStringValue() string {
	if x, ok := x.GetValue().(*Field_StringValue); ok {
		return x.StringValue
	}
	return ""
}

func (x *Field) GetInt64Value() int64 {
	if x, ok := x.GetValue().(*Field_Int64Value); ok {
		return x.Int64Value
	}
	return 0
}

func (x *Field) GetUint64Value() uint64 {
	if x, ok := x.GetValue().(*Field_Uint64Value); ok {
		return x.Uint64Value
	}
	return 0
}

func (x *Field) GetDoubleValue() float64 {
	if x, ok := x.GetValue().(*Field_DoubleValue); ok {
		return x.DoubleValue
	}
	return 0
}

func (x *Field) GetBoolValue() bool {
	if x, ok := x.GetValue().(*Field_BoolValue); ok {
		return x.BoolValue
	}
	return false
}

func (x *Field) GetBytesValue() []byte {
	if x, ok := x.GetValue().(*Field_BytesValue); ok {
		return x.BytesValue
	}
	return nil
}

func (x *Field) GetTimeValue() *timestamp.Timestamp {
	if x, ok := x.GetValue().(*Field_TimeValue); ok {
		return x.TimeValue
	}
	return nil
}

type isField_Value interface {
	isField_Value()
}

type Field_StringValue struct {
	StringValue string `protobuf:"bytes,101,opt,name=string_value,json=stringValue,proto3,oneof"`
}

type Field_Int64Value struct {
	Int64Value int64 `protobuf:"varint,102,opt,name=int64_value,json=int64Value,proto3,oneof"`
}

type Field_Uint64Value struct {
	Uint64Value uint64 `protobuf:"varint,103,opt,name=uint64_value,json=uint64Value,proto3,oneof"`
}

type Field_DoubleValue struct {
	DoubleValue float64 `protobuf:"fixed64,104,opt,name=double_value,json=doubleValue,proto3,oneof"`
}

type Field_BoolValue struct {
	BoolValue bool `protobuf:"varint,105,opt,name=bool_value,json=boolValue,proto3,oneof"`
}

type Field_BytesValue struct {
	BytesValue []byte `protobuf:"bytes,106,opt,name=bytes_value,json=bytesValue,proto3,oneof"`
}

type Field_TimeValue struct {
	TimeValue *timestamp.Timestamp `protobuf:"bytes,107,opt,name=time_value,json=timeValue,proto3,oneof"` // TODO: other basic types I'm forgetting?
}

func (*Field_StringValue) isField_Value() {}

func (*Field_Int64Value) isField_Value() {}

func (*Field_Uint64Value) isField_Value() {}

func (*Field_DoubleValue) isField_Value() {}

func (*Field_BoolValue) isField_Value() {}

func (*Field_BytesValue) isField_Value() {}

func (*Field_TimeValue) isField_Value() {}

var File_where_proto protoreflect.FileDescriptor

var file_where_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x77, 0x68, 0x65, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0c,
	0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x87, 0x01, 0x0a,
	0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x29, 0x0a, 0x08, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x08, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x12, 0x27, 0x0a, 0x0f, 0x6e, 0x65, 0x67, 0x61, 0x74, 0x65, 0x5f, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x6e, 0x65, 0x67, 0x61,
	0x74, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x2a, 0x0a, 0x08, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x08, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x22, 0x59, 0x0a, 0x0c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x45,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18,
	0x65, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x48, 0x00, 0x52,
	0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1e, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18,
	0x66, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x48, 0x00, 0x52,
	0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x09, 0x0a, 0x07, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x22, 0xa0, 0x03, 0x0a, 0x05, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x21, 0x0a, 0x06, 0x63,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x43, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x49, 0x44, 0x52, 0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x2b,
	0x0a, 0x11, 0x6e, 0x65, 0x67, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x6e, 0x65, 0x67, 0x61, 0x74,
	0x65, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x2b, 0x0a, 0x0a, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0b, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x0a, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x23, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x65, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x0b, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x21, 0x0a,
	0x0b, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x66, 0x20, 0x01,
	0x28, 0x03, 0x48, 0x00, 0x52, 0x0a, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x23, 0x0a, 0x0c, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x67, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x0b, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x23, 0x0a, 0x0c, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x68, 0x20, 0x01, 0x28, 0x01, 0x48, 0x00, 0x52, 0x0b, 0x64,
	0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1f, 0x0a, 0x0a, 0x62, 0x6f,
	0x6f, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x69, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00,
	0x52, 0x09, 0x62, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x21, 0x0a, 0x0b, 0x62,
	0x79, 0x74, 0x65, 0x73, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x6a, 0x20, 0x01, 0x28, 0x0c,
	0x48, 0x00, 0x52, 0x0a, 0x62, 0x79, 0x74, 0x65, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x3b,
	0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x6b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x00,
	0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x2a, 0xa1, 0x01, 0x0a, 0x0a, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x12, 0x16, 0x0a, 0x12, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x43,
	0x4f, 0x4d, 0x50, 0x41, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x45,
	0x51, 0x55, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x46, 0x55, 0x5a, 0x5a, 0x59, 0x5f,
	0x45, 0x51, 0x55, 0x41, 0x4c, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x47, 0x52, 0x45, 0x41, 0x54,
	0x45, 0x52, 0x5f, 0x54, 0x48, 0x41, 0x4e, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x4c, 0x45, 0x53,
	0x53, 0x5f, 0x54, 0x48, 0x41, 0x4e, 0x10, 0x04, 0x12, 0x19, 0x0a, 0x15, 0x47, 0x52, 0x45, 0x41,
	0x54, 0x45, 0x52, 0x5f, 0x54, 0x48, 0x41, 0x4e, 0x5f, 0x4f, 0x52, 0x5f, 0x45, 0x51, 0x55, 0x41,
	0x4c, 0x10, 0x05, 0x12, 0x16, 0x0a, 0x12, 0x4c, 0x45, 0x53, 0x53, 0x5f, 0x54, 0x48, 0x41, 0x4e,
	0x5f, 0x4f, 0x52, 0x5f, 0x45, 0x51, 0x55, 0x41, 0x4c, 0x10, 0x06, 0x12, 0x0b, 0x0a, 0x07, 0x49,
	0x53, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x10, 0x07, 0x2a, 0x44, 0x0a, 0x0d, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x19, 0x0a, 0x15, 0x55, 0x4e, 0x4b,
	0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54,
	0x4f, 0x52, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x4e, 0x44, 0x10, 0x01, 0x12, 0x06, 0x0a,
	0x02, 0x4f, 0x52, 0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x58, 0x4f, 0x52, 0x10, 0x03, 0x42, 0x39,
	0x5a, 0x20, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6c, 0x6c, 0x6b,
	0x65, 0x6e, 0x6e, 0x65, 0x64, 0x79, 0x2f, 0x6c, 0x73, 0x71, 0x6c, 0x2f, 0x67, 0x6f, 0x6c, 0x73,
	0x71, 0x6c, 0xaa, 0x02, 0x14, 0x4c, 0x75, 0x6b, 0x65, 0x4b, 0x65, 0x6e, 0x6e, 0x65, 0x64, 0x79,
	0x2e, 0x4c, 0x53, 0x51, 0x4c, 0x2e, 0x4e, 0x65, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_where_proto_rawDescOnce sync.Once
	file_where_proto_rawDescData = file_where_proto_rawDesc
)

func file_where_proto_rawDescGZIP() []byte {
	file_where_proto_rawDescOnce.Do(func() {
		file_where_proto_rawDescData = protoimpl.X.CompressGZIP(file_where_proto_rawDescData)
	})
	return file_where_proto_rawDescData
}

var file_where_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_where_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_where_proto_goTypes = []interface{}{
	(Comparator)(0),             // 0: Comparator
	(GroupOperator)(0),          // 1: GroupOperator
	(*Group)(nil),               // 2: Group
	(*GroupElement)(nil),        // 3: GroupElement
	(*Field)(nil),               // 4: Field
	(*ColumnID)(nil),            // 5: ColumnID
	(*timestamp.Timestamp)(nil), // 6: google.protobuf.Timestamp
}
var file_where_proto_depIdxs = []int32{
	3, // 0: Group.elements:type_name -> GroupElement
	1, // 1: Group.operator:type_name -> GroupOperator
	4, // 2: GroupElement.field:type_name -> Field
	2, // 3: GroupElement.group:type_name -> Group
	5, // 4: Field.column:type_name -> ColumnID
	0, // 5: Field.comparator:type_name -> Comparator
	6, // 6: Field.time_value:type_name -> google.protobuf.Timestamp
	7, // [7:7] is the sub-list for method output_type
	7, // [7:7] is the sub-list for method input_type
	7, // [7:7] is the sub-list for extension type_name
	7, // [7:7] is the sub-list for extension extendee
	0, // [0:7] is the sub-list for field type_name
}

func init() { file_where_proto_init() }
func file_where_proto_init() {
	if File_where_proto != nil {
		return
	}
	file_select_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_where_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Group); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_where_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupElement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_where_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Field); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_where_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*GroupElement_Field)(nil),
		(*GroupElement_Group)(nil),
	}
	file_where_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*Field_StringValue)(nil),
		(*Field_Int64Value)(nil),
		(*Field_Uint64Value)(nil),
		(*Field_DoubleValue)(nil),
		(*Field_BoolValue)(nil),
		(*Field_BytesValue)(nil),
		(*Field_TimeValue)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_where_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_where_proto_goTypes,
		DependencyIndexes: file_where_proto_depIdxs,
		EnumInfos:         file_where_proto_enumTypes,
		MessageInfos:      file_where_proto_msgTypes,
	}.Build()
	File_where_proto = out.File
	file_where_proto_rawDesc = nil
	file_where_proto_goTypes = nil
	file_where_proto_depIdxs = nil
}
