// source: model.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js');
goog.object.extend(proto, google_protobuf_timestamp_pb);
goog.exportSymbol('proto.BoolPropertyType', null, global);
goog.exportSymbol('proto.BytesPropertyType', null, global);
goog.exportSymbol('proto.Domain', null, global);
goog.exportSymbol('proto.DoublePropertyType', null, global);
goog.exportSymbol('proto.Int64PropertyType', null, global);
goog.exportSymbol('proto.PropertyInformation', null, global);
goog.exportSymbol('proto.PropertyInformation.TypeAndLimitsCase', null, global);
goog.exportSymbol('proto.StringPropertyType', null, global);
goog.exportSymbol('proto.TimestampPropertyType', null, global);
goog.exportSymbol('proto.Uint64PropertyType', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Domain = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Domain, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Domain.displayName = 'proto.Domain';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PropertyInformation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.PropertyInformation.oneofGroups_);
};
goog.inherits(proto.PropertyInformation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PropertyInformation.displayName = 'proto.PropertyInformation';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.StringPropertyType = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.StringPropertyType, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.StringPropertyType.displayName = 'proto.StringPropertyType';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Int64PropertyType = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Int64PropertyType, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Int64PropertyType.displayName = 'proto.Int64PropertyType';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Uint64PropertyType = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Uint64PropertyType, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Uint64PropertyType.displayName = 'proto.Uint64PropertyType';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.DoublePropertyType = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.DoublePropertyType, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.DoublePropertyType.displayName = 'proto.DoublePropertyType';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.BoolPropertyType = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.BoolPropertyType, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.BoolPropertyType.displayName = 'proto.BoolPropertyType';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.BytesPropertyType = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.BytesPropertyType, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.BytesPropertyType.displayName = 'proto.BytesPropertyType';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TimestampPropertyType = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.TimestampPropertyType, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.TimestampPropertyType.displayName = 'proto.TimestampPropertyType';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Domain.prototype.toObject = function(opt_includeInstance) {
  return proto.Domain.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Domain} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Domain.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    propertiesMap: (f = msg.getPropertiesMap()) ? f.toObject(includeInstance, proto.PropertyInformation.toObject) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Domain}
 */
proto.Domain.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Domain;
  return proto.Domain.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Domain} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Domain}
 */
proto.Domain.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = msg.getPropertiesMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.PropertyInformation.deserializeBinaryFromReader, "", new proto.PropertyInformation());
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Domain.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Domain.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Domain} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Domain.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPropertiesMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(2, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.PropertyInformation.serializeBinaryToWriter);
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.Domain.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.Domain} returns this
 */
proto.Domain.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * map<string, PropertyInformation> properties = 2;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.PropertyInformation>}
 */
proto.Domain.prototype.getPropertiesMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.PropertyInformation>} */ (
      jspb.Message.getMapField(this, 2, opt_noLazyCreate,
      proto.PropertyInformation));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.Domain} returns this
 */
proto.Domain.prototype.clearPropertiesMap = function() {
  this.getPropertiesMap().clear();
  return this;};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.PropertyInformation.oneofGroups_ = [[101,102,103,104,105,106,107]];

/**
 * @enum {number}
 */
proto.PropertyInformation.TypeAndLimitsCase = {
  TYPE_AND_LIMITS_NOT_SET: 0,
  STRING: 101,
  INT64: 102,
  UINT64: 103,
  DOUBLE: 104,
  BOOL: 105,
  BYTES: 106,
  TIMESTAMP: 107
};

/**
 * @return {proto.PropertyInformation.TypeAndLimitsCase}
 */
proto.PropertyInformation.prototype.getTypeAndLimitsCase = function() {
  return /** @type {proto.PropertyInformation.TypeAndLimitsCase} */(jspb.Message.computeOneofCase(this, proto.PropertyInformation.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PropertyInformation.prototype.toObject = function(opt_includeInstance) {
  return proto.PropertyInformation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PropertyInformation} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PropertyInformation.toObject = function(includeInstance, msg) {
  var f, obj = {
    displayName: jspb.Message.getFieldWithDefault(msg, 1, ""),
    string: (f = msg.getString()) && proto.StringPropertyType.toObject(includeInstance, f),
    int64: (f = msg.getInt64()) && proto.Int64PropertyType.toObject(includeInstance, f),
    uint64: (f = msg.getUint64()) && proto.Uint64PropertyType.toObject(includeInstance, f),
    pb_double: (f = msg.getDouble()) && proto.DoublePropertyType.toObject(includeInstance, f),
    bool: (f = msg.getBool()) && proto.BoolPropertyType.toObject(includeInstance, f),
    bytes: (f = msg.getBytes()) && proto.BytesPropertyType.toObject(includeInstance, f),
    timestamp: (f = msg.getTimestamp()) && proto.TimestampPropertyType.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PropertyInformation}
 */
proto.PropertyInformation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PropertyInformation;
  return proto.PropertyInformation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PropertyInformation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PropertyInformation}
 */
proto.PropertyInformation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDisplayName(value);
      break;
    case 101:
      var value = new proto.StringPropertyType;
      reader.readMessage(value,proto.StringPropertyType.deserializeBinaryFromReader);
      msg.setString(value);
      break;
    case 102:
      var value = new proto.Int64PropertyType;
      reader.readMessage(value,proto.Int64PropertyType.deserializeBinaryFromReader);
      msg.setInt64(value);
      break;
    case 103:
      var value = new proto.Uint64PropertyType;
      reader.readMessage(value,proto.Uint64PropertyType.deserializeBinaryFromReader);
      msg.setUint64(value);
      break;
    case 104:
      var value = new proto.DoublePropertyType;
      reader.readMessage(value,proto.DoublePropertyType.deserializeBinaryFromReader);
      msg.setDouble(value);
      break;
    case 105:
      var value = new proto.BoolPropertyType;
      reader.readMessage(value,proto.BoolPropertyType.deserializeBinaryFromReader);
      msg.setBool(value);
      break;
    case 106:
      var value = new proto.BytesPropertyType;
      reader.readMessage(value,proto.BytesPropertyType.deserializeBinaryFromReader);
      msg.setBytes(value);
      break;
    case 107:
      var value = new proto.TimestampPropertyType;
      reader.readMessage(value,proto.TimestampPropertyType.deserializeBinaryFromReader);
      msg.setTimestamp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PropertyInformation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PropertyInformation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PropertyInformation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PropertyInformation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDisplayName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getString();
  if (f != null) {
    writer.writeMessage(
      101,
      f,
      proto.StringPropertyType.serializeBinaryToWriter
    );
  }
  f = message.getInt64();
  if (f != null) {
    writer.writeMessage(
      102,
      f,
      proto.Int64PropertyType.serializeBinaryToWriter
    );
  }
  f = message.getUint64();
  if (f != null) {
    writer.writeMessage(
      103,
      f,
      proto.Uint64PropertyType.serializeBinaryToWriter
    );
  }
  f = message.getDouble();
  if (f != null) {
    writer.writeMessage(
      104,
      f,
      proto.DoublePropertyType.serializeBinaryToWriter
    );
  }
  f = message.getBool();
  if (f != null) {
    writer.writeMessage(
      105,
      f,
      proto.BoolPropertyType.serializeBinaryToWriter
    );
  }
  f = message.getBytes();
  if (f != null) {
    writer.writeMessage(
      106,
      f,
      proto.BytesPropertyType.serializeBinaryToWriter
    );
  }
  f = message.getTimestamp();
  if (f != null) {
    writer.writeMessage(
      107,
      f,
      proto.TimestampPropertyType.serializeBinaryToWriter
    );
  }
};


/**
 * optional string display_name = 1;
 * @return {string}
 */
proto.PropertyInformation.prototype.getDisplayName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.PropertyInformation} returns this
 */
proto.PropertyInformation.prototype.setDisplayName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional StringPropertyType string = 101;
 * @return {?proto.StringPropertyType}
 */
proto.PropertyInformation.prototype.getString = function() {
  return /** @type{?proto.StringPropertyType} */ (
    jspb.Message.getWrapperField(this, proto.StringPropertyType, 101));
};


/**
 * @param {?proto.StringPropertyType|undefined} value
 * @return {!proto.PropertyInformation} returns this
*/
proto.PropertyInformation.prototype.setString = function(value) {
  return jspb.Message.setOneofWrapperField(this, 101, proto.PropertyInformation.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.PropertyInformation} returns this
 */
proto.PropertyInformation.prototype.clearString = function() {
  return this.setString(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.PropertyInformation.prototype.hasString = function() {
  return jspb.Message.getField(this, 101) != null;
};


/**
 * optional Int64PropertyType int64 = 102;
 * @return {?proto.Int64PropertyType}
 */
proto.PropertyInformation.prototype.getInt64 = function() {
  return /** @type{?proto.Int64PropertyType} */ (
    jspb.Message.getWrapperField(this, proto.Int64PropertyType, 102));
};


/**
 * @param {?proto.Int64PropertyType|undefined} value
 * @return {!proto.PropertyInformation} returns this
*/
proto.PropertyInformation.prototype.setInt64 = function(value) {
  return jspb.Message.setOneofWrapperField(this, 102, proto.PropertyInformation.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.PropertyInformation} returns this
 */
proto.PropertyInformation.prototype.clearInt64 = function() {
  return this.setInt64(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.PropertyInformation.prototype.hasInt64 = function() {
  return jspb.Message.getField(this, 102) != null;
};


/**
 * optional Uint64PropertyType uint64 = 103;
 * @return {?proto.Uint64PropertyType}
 */
proto.PropertyInformation.prototype.getUint64 = function() {
  return /** @type{?proto.Uint64PropertyType} */ (
    jspb.Message.getWrapperField(this, proto.Uint64PropertyType, 103));
};


/**
 * @param {?proto.Uint64PropertyType|undefined} value
 * @return {!proto.PropertyInformation} returns this
*/
proto.PropertyInformation.prototype.setUint64 = function(value) {
  return jspb.Message.setOneofWrapperField(this, 103, proto.PropertyInformation.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.PropertyInformation} returns this
 */
proto.PropertyInformation.prototype.clearUint64 = function() {
  return this.setUint64(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.PropertyInformation.prototype.hasUint64 = function() {
  return jspb.Message.getField(this, 103) != null;
};


/**
 * optional DoublePropertyType double = 104;
 * @return {?proto.DoublePropertyType}
 */
proto.PropertyInformation.prototype.getDouble = function() {
  return /** @type{?proto.DoublePropertyType} */ (
    jspb.Message.getWrapperField(this, proto.DoublePropertyType, 104));
};


/**
 * @param {?proto.DoublePropertyType|undefined} value
 * @return {!proto.PropertyInformation} returns this
*/
proto.PropertyInformation.prototype.setDouble = function(value) {
  return jspb.Message.setOneofWrapperField(this, 104, proto.PropertyInformation.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.PropertyInformation} returns this
 */
proto.PropertyInformation.prototype.clearDouble = function() {
  return this.setDouble(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.PropertyInformation.prototype.hasDouble = function() {
  return jspb.Message.getField(this, 104) != null;
};


/**
 * optional BoolPropertyType bool = 105;
 * @return {?proto.BoolPropertyType}
 */
proto.PropertyInformation.prototype.getBool = function() {
  return /** @type{?proto.BoolPropertyType} */ (
    jspb.Message.getWrapperField(this, proto.BoolPropertyType, 105));
};


/**
 * @param {?proto.BoolPropertyType|undefined} value
 * @return {!proto.PropertyInformation} returns this
*/
proto.PropertyInformation.prototype.setBool = function(value) {
  return jspb.Message.setOneofWrapperField(this, 105, proto.PropertyInformation.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.PropertyInformation} returns this
 */
proto.PropertyInformation.prototype.clearBool = function() {
  return this.setBool(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.PropertyInformation.prototype.hasBool = function() {
  return jspb.Message.getField(this, 105) != null;
};


/**
 * optional BytesPropertyType bytes = 106;
 * @return {?proto.BytesPropertyType}
 */
proto.PropertyInformation.prototype.getBytes = function() {
  return /** @type{?proto.BytesPropertyType} */ (
    jspb.Message.getWrapperField(this, proto.BytesPropertyType, 106));
};


/**
 * @param {?proto.BytesPropertyType|undefined} value
 * @return {!proto.PropertyInformation} returns this
*/
proto.PropertyInformation.prototype.setBytes = function(value) {
  return jspb.Message.setOneofWrapperField(this, 106, proto.PropertyInformation.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.PropertyInformation} returns this
 */
proto.PropertyInformation.prototype.clearBytes = function() {
  return this.setBytes(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.PropertyInformation.prototype.hasBytes = function() {
  return jspb.Message.getField(this, 106) != null;
};


/**
 * optional TimestampPropertyType timestamp = 107;
 * @return {?proto.TimestampPropertyType}
 */
proto.PropertyInformation.prototype.getTimestamp = function() {
  return /** @type{?proto.TimestampPropertyType} */ (
    jspb.Message.getWrapperField(this, proto.TimestampPropertyType, 107));
};


/**
 * @param {?proto.TimestampPropertyType|undefined} value
 * @return {!proto.PropertyInformation} returns this
*/
proto.PropertyInformation.prototype.setTimestamp = function(value) {
  return jspb.Message.setOneofWrapperField(this, 107, proto.PropertyInformation.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.PropertyInformation} returns this
 */
proto.PropertyInformation.prototype.clearTimestamp = function() {
  return this.setTimestamp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.PropertyInformation.prototype.hasTimestamp = function() {
  return jspb.Message.getField(this, 107) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.StringPropertyType.prototype.toObject = function(opt_includeInstance) {
  return proto.StringPropertyType.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.StringPropertyType} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.StringPropertyType.toObject = function(includeInstance, msg) {
  var f, obj = {
    lengthMinimum: jspb.Message.getFieldWithDefault(msg, 1, 0),
    lengthMaximum: jspb.Message.getFieldWithDefault(msg, 2, 0),
    characterSet: jspb.Message.getFieldWithDefault(msg, 3, ""),
    queryValidationRegex: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.StringPropertyType}
 */
proto.StringPropertyType.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.StringPropertyType;
  return proto.StringPropertyType.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.StringPropertyType} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.StringPropertyType}
 */
proto.StringPropertyType.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setLengthMinimum(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setLengthMaximum(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setCharacterSet(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setQueryValidationRegex(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.StringPropertyType.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.StringPropertyType.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.StringPropertyType} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.StringPropertyType.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLengthMinimum();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getLengthMaximum();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getCharacterSet();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getQueryValidationRegex();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional uint32 length_minimum = 1;
 * @return {number}
 */
proto.StringPropertyType.prototype.getLengthMinimum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.StringPropertyType} returns this
 */
proto.StringPropertyType.prototype.setLengthMinimum = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 length_maximum = 2;
 * @return {number}
 */
proto.StringPropertyType.prototype.getLengthMaximum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.StringPropertyType} returns this
 */
proto.StringPropertyType.prototype.setLengthMaximum = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string character_set = 3;
 * @return {string}
 */
proto.StringPropertyType.prototype.getCharacterSet = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.StringPropertyType} returns this
 */
proto.StringPropertyType.prototype.setCharacterSet = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string query_validation_regex = 4;
 * @return {string}
 */
proto.StringPropertyType.prototype.getQueryValidationRegex = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.StringPropertyType} returns this
 */
proto.StringPropertyType.prototype.setQueryValidationRegex = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Int64PropertyType.prototype.toObject = function(opt_includeInstance) {
  return proto.Int64PropertyType.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Int64PropertyType} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Int64PropertyType.toObject = function(includeInstance, msg) {
  var f, obj = {
    minimumValue: jspb.Message.getFieldWithDefault(msg, 1, 0),
    maximumValue: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Int64PropertyType}
 */
proto.Int64PropertyType.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Int64PropertyType;
  return proto.Int64PropertyType.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Int64PropertyType} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Int64PropertyType}
 */
proto.Int64PropertyType.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setMinimumValue(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setMaximumValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Int64PropertyType.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Int64PropertyType.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Int64PropertyType} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Int64PropertyType.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMinimumValue();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getMaximumValue();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
};


/**
 * optional int64 minimum_value = 1;
 * @return {number}
 */
proto.Int64PropertyType.prototype.getMinimumValue = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.Int64PropertyType} returns this
 */
proto.Int64PropertyType.prototype.setMinimumValue = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 maximum_value = 2;
 * @return {number}
 */
proto.Int64PropertyType.prototype.getMaximumValue = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.Int64PropertyType} returns this
 */
proto.Int64PropertyType.prototype.setMaximumValue = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Uint64PropertyType.prototype.toObject = function(opt_includeInstance) {
  return proto.Uint64PropertyType.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Uint64PropertyType} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Uint64PropertyType.toObject = function(includeInstance, msg) {
  var f, obj = {
    minimumValue: jspb.Message.getFieldWithDefault(msg, 1, 0),
    maximumValue: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Uint64PropertyType}
 */
proto.Uint64PropertyType.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Uint64PropertyType;
  return proto.Uint64PropertyType.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Uint64PropertyType} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Uint64PropertyType}
 */
proto.Uint64PropertyType.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMinimumValue(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMaximumValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Uint64PropertyType.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Uint64PropertyType.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Uint64PropertyType} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Uint64PropertyType.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMinimumValue();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getMaximumValue();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
};


/**
 * optional uint64 minimum_value = 1;
 * @return {number}
 */
proto.Uint64PropertyType.prototype.getMinimumValue = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.Uint64PropertyType} returns this
 */
proto.Uint64PropertyType.prototype.setMinimumValue = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 maximum_value = 2;
 * @return {number}
 */
proto.Uint64PropertyType.prototype.getMaximumValue = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.Uint64PropertyType} returns this
 */
proto.Uint64PropertyType.prototype.setMaximumValue = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.DoublePropertyType.prototype.toObject = function(opt_includeInstance) {
  return proto.DoublePropertyType.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.DoublePropertyType} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DoublePropertyType.toObject = function(includeInstance, msg) {
  var f, obj = {
    minimumValue: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
    maximumValue: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.DoublePropertyType}
 */
proto.DoublePropertyType.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.DoublePropertyType;
  return proto.DoublePropertyType.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.DoublePropertyType} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.DoublePropertyType}
 */
proto.DoublePropertyType.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMinimumValue(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMaximumValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.DoublePropertyType.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.DoublePropertyType.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.DoublePropertyType} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DoublePropertyType.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMinimumValue();
  if (f !== 0.0) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = message.getMaximumValue();
  if (f !== 0.0) {
    writer.writeDouble(
      2,
      f
    );
  }
};


/**
 * optional double minimum_value = 1;
 * @return {number}
 */
proto.DoublePropertyType.prototype.getMinimumValue = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.DoublePropertyType} returns this
 */
proto.DoublePropertyType.prototype.setMinimumValue = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional double maximum_value = 2;
 * @return {number}
 */
proto.DoublePropertyType.prototype.getMaximumValue = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.DoublePropertyType} returns this
 */
proto.DoublePropertyType.prototype.setMaximumValue = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.BoolPropertyType.prototype.toObject = function(opt_includeInstance) {
  return proto.BoolPropertyType.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.BoolPropertyType} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.BoolPropertyType.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.BoolPropertyType}
 */
proto.BoolPropertyType.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.BoolPropertyType;
  return proto.BoolPropertyType.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.BoolPropertyType} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.BoolPropertyType}
 */
proto.BoolPropertyType.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.BoolPropertyType.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.BoolPropertyType.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.BoolPropertyType} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.BoolPropertyType.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.BytesPropertyType.prototype.toObject = function(opt_includeInstance) {
  return proto.BytesPropertyType.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.BytesPropertyType} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.BytesPropertyType.toObject = function(includeInstance, msg) {
  var f, obj = {
    lengthMinimum: jspb.Message.getFieldWithDefault(msg, 1, 0),
    lengthMaximum: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.BytesPropertyType}
 */
proto.BytesPropertyType.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.BytesPropertyType;
  return proto.BytesPropertyType.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.BytesPropertyType} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.BytesPropertyType}
 */
proto.BytesPropertyType.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setLengthMinimum(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setLengthMaximum(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.BytesPropertyType.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.BytesPropertyType.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.BytesPropertyType} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.BytesPropertyType.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLengthMinimum();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getLengthMaximum();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional uint32 length_minimum = 1;
 * @return {number}
 */
proto.BytesPropertyType.prototype.getLengthMinimum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.BytesPropertyType} returns this
 */
proto.BytesPropertyType.prototype.setLengthMinimum = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 length_maximum = 2;
 * @return {number}
 */
proto.BytesPropertyType.prototype.getLengthMaximum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.BytesPropertyType} returns this
 */
proto.BytesPropertyType.prototype.setLengthMaximum = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.TimestampPropertyType.prototype.toObject = function(opt_includeInstance) {
  return proto.TimestampPropertyType.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.TimestampPropertyType} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TimestampPropertyType.toObject = function(includeInstance, msg) {
  var f, obj = {
    minimumValue: (f = msg.getMinimumValue()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    maximumValue: (f = msg.getMaximumValue()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TimestampPropertyType}
 */
proto.TimestampPropertyType.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.TimestampPropertyType;
  return proto.TimestampPropertyType.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TimestampPropertyType} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TimestampPropertyType}
 */
proto.TimestampPropertyType.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setMinimumValue(value);
      break;
    case 2:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setMaximumValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TimestampPropertyType.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.TimestampPropertyType.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TimestampPropertyType} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TimestampPropertyType.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMinimumValue();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getMaximumValue();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
};


/**
 * optional google.protobuf.Timestamp minimum_value = 1;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.TimestampPropertyType.prototype.getMinimumValue = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 1));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.TimestampPropertyType} returns this
*/
proto.TimestampPropertyType.prototype.setMinimumValue = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.TimestampPropertyType} returns this
 */
proto.TimestampPropertyType.prototype.clearMinimumValue = function() {
  return this.setMinimumValue(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.TimestampPropertyType.prototype.hasMinimumValue = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional google.protobuf.Timestamp maximum_value = 2;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.TimestampPropertyType.prototype.getMaximumValue = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 2));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.TimestampPropertyType} returns this
*/
proto.TimestampPropertyType.prototype.setMaximumValue = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.TimestampPropertyType} returns this
 */
proto.TimestampPropertyType.prototype.clearMaximumValue = function() {
  return this.setMaximumValue(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.TimestampPropertyType.prototype.hasMaximumValue = function() {
  return jspb.Message.getField(this, 2) != null;
};


goog.object.extend(exports, proto);
