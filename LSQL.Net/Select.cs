// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: select.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace LukeKennedy.LSQL.Net {

  /// <summary>Holder for reflection information generated from select.proto</summary>
  public static partial class SelectReflection {

    #region Descriptor
    /// <summary>File descriptor for select.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static SelectReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgxzZWxlY3QucHJvdG8iiQEKBlNlbGVjdBIaCgdjb2x1bW5zGAEgAygLMgku",
            "Q29sdW1uSUQSJwoIb3JkZXJpbmcYAiADKAsyFS5TZWxlY3QuT3JkZXJpbmdF",
            "bnRyeRo6Cg1PcmRlcmluZ0VudHJ5EgsKA2tleRgBIAEoDRIYCgV2YWx1ZRgC",
            "IAEoCzIJLk9yZGVyaW5nOgI4ASIzCghDb2x1bW5JRBISCgpmaWVsZF9uYW1l",
            "GAEgASgJEhMKC2RvbWFpbl9uYW1lGAIgASgJIjkKCE9yZGVyaW5nEhkKBmNv",
            "bHVtbhgBIAEoCzIJLkNvbHVtbklEEhIKCmRlc2NlbmRpbmcYAiABKAhCOVog",
            "Z2l0aHViLmNvbS9sbGtlbm5lZHkvbHNxbC9nb2xzcWyqAhRMdWtlS2VubmVk",
            "eS5MU1FMLk5ldGIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::LukeKennedy.LSQL.Net.Select), global::LukeKennedy.LSQL.Net.Select.Parser, new[]{ "Columns", "Ordering" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::LukeKennedy.LSQL.Net.ColumnID), global::LukeKennedy.LSQL.Net.ColumnID.Parser, new[]{ "FieldName", "DomainName" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LukeKennedy.LSQL.Net.Ordering), global::LukeKennedy.LSQL.Net.Ordering.Parser, new[]{ "Column", "Descending" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class Select : pb::IMessage<Select>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Select> _parser = new pb::MessageParser<Select>(() => new Select());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Select> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LukeKennedy.LSQL.Net.SelectReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Select() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Select(Select other) : this() {
      columns_ = other.columns_.Clone();
      ordering_ = other.ordering_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Select Clone() {
      return new Select(this);
    }

    /// <summary>Field number for the "columns" field.</summary>
    public const int ColumnsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::LukeKennedy.LSQL.Net.ColumnID> _repeated_columns_codec
        = pb::FieldCodec.ForMessage(10, global::LukeKennedy.LSQL.Net.ColumnID.Parser);
    private readonly pbc::RepeatedField<global::LukeKennedy.LSQL.Net.ColumnID> columns_ = new pbc::RepeatedField<global::LukeKennedy.LSQL.Net.ColumnID>();
    /// <summary>
    /// Columns are the columns to return in the results table.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::LukeKennedy.LSQL.Net.ColumnID> Columns {
      get { return columns_; }
    }

    /// <summary>Field number for the "ordering" field.</summary>
    public const int OrderingFieldNumber = 2;
    private static readonly pbc::MapField<uint, global::LukeKennedy.LSQL.Net.Ordering>.Codec _map_ordering_codec
        = new pbc::MapField<uint, global::LukeKennedy.LSQL.Net.Ordering>.Codec(pb::FieldCodec.ForUInt32(8, 0), pb::FieldCodec.ForMessage(18, global::LukeKennedy.LSQL.Net.Ordering.Parser), 18);
    private readonly pbc::MapField<uint, global::LukeKennedy.LSQL.Net.Ordering> ordering_ = new pbc::MapField<uint, global::LukeKennedy.LSQL.Net.Ordering>();
    /// <summary>
    /// Ordering indicates the order by which to sort the results before paging. The key is the priority of the sort, magnitude doesn't matter but relative greater/lesser does. Highest number gets sorted first.
    /// Optional, unless the RDBMS on the other end requires it,
    /// but it is the responsibility of the server directly interfacing with the RDBMS to understand the requirements of its data source.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<uint, global::LukeKennedy.LSQL.Net.Ordering> Ordering {
      get { return ordering_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Select);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Select other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!columns_.Equals(other.columns_)) return false;
      if (!Ordering.Equals(other.Ordering)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= columns_.GetHashCode();
      hash ^= Ordering.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      columns_.WriteTo(output, _repeated_columns_codec);
      ordering_.WriteTo(output, _map_ordering_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      columns_.WriteTo(ref output, _repeated_columns_codec);
      ordering_.WriteTo(ref output, _map_ordering_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += columns_.CalculateSize(_repeated_columns_codec);
      size += ordering_.CalculateSize(_map_ordering_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Select other) {
      if (other == null) {
        return;
      }
      columns_.Add(other.columns_);
      ordering_.Add(other.ordering_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            columns_.AddEntriesFrom(input, _repeated_columns_codec);
            break;
          }
          case 18: {
            ordering_.AddEntriesFrom(input, _map_ordering_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            columns_.AddEntriesFrom(ref input, _repeated_columns_codec);
            break;
          }
          case 18: {
            ordering_.AddEntriesFrom(ref input, _map_ordering_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ColumnID : pb::IMessage<ColumnID>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ColumnID> _parser = new pb::MessageParser<ColumnID>(() => new ColumnID());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ColumnID> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LukeKennedy.LSQL.Net.SelectReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ColumnID() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ColumnID(ColumnID other) : this() {
      fieldName_ = other.fieldName_;
      domainName_ = other.domainName_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ColumnID Clone() {
      return new ColumnID(this);
    }

    /// <summary>Field number for the "field_name" field.</summary>
    public const int FieldNameFieldNumber = 1;
    private string fieldName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FieldName {
      get { return fieldName_; }
      set {
        fieldName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "domain_name" field.</summary>
    public const int DomainNameFieldNumber = 2;
    private string domainName_ = "";
    /// <summary>
    /// DomainName is optional if only one domain is present, but mandatory if multiple domains are present
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DomainName {
      get { return domainName_; }
      set {
        domainName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ColumnID);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ColumnID other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FieldName != other.FieldName) return false;
      if (DomainName != other.DomainName) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FieldName.Length != 0) hash ^= FieldName.GetHashCode();
      if (DomainName.Length != 0) hash ^= DomainName.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (FieldName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FieldName);
      }
      if (DomainName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(DomainName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (FieldName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FieldName);
      }
      if (DomainName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(DomainName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FieldName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FieldName);
      }
      if (DomainName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DomainName);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ColumnID other) {
      if (other == null) {
        return;
      }
      if (other.FieldName.Length != 0) {
        FieldName = other.FieldName;
      }
      if (other.DomainName.Length != 0) {
        DomainName = other.DomainName;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            FieldName = input.ReadString();
            break;
          }
          case 18: {
            DomainName = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            FieldName = input.ReadString();
            break;
          }
          case 18: {
            DomainName = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class Ordering : pb::IMessage<Ordering>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Ordering> _parser = new pb::MessageParser<Ordering>(() => new Ordering());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Ordering> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LukeKennedy.LSQL.Net.SelectReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Ordering() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Ordering(Ordering other) : this() {
      column_ = other.column_ != null ? other.column_.Clone() : null;
      descending_ = other.descending_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Ordering Clone() {
      return new Ordering(this);
    }

    /// <summary>Field number for the "column" field.</summary>
    public const int ColumnFieldNumber = 1;
    private global::LukeKennedy.LSQL.Net.ColumnID column_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LukeKennedy.LSQL.Net.ColumnID Column {
      get { return column_; }
      set {
        column_ = value;
      }
    }

    /// <summary>Field number for the "descending" field.</summary>
    public const int DescendingFieldNumber = 2;
    private bool descending_;
    /// <summary>
    /// Descending indicates this column should be sorted in descending order instead of the default ascending.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Descending {
      get { return descending_; }
      set {
        descending_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Ordering);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Ordering other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Column, other.Column)) return false;
      if (Descending != other.Descending) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (column_ != null) hash ^= Column.GetHashCode();
      if (Descending != false) hash ^= Descending.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (column_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Column);
      }
      if (Descending != false) {
        output.WriteRawTag(16);
        output.WriteBool(Descending);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (column_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Column);
      }
      if (Descending != false) {
        output.WriteRawTag(16);
        output.WriteBool(Descending);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (column_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Column);
      }
      if (Descending != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Ordering other) {
      if (other == null) {
        return;
      }
      if (other.column_ != null) {
        if (column_ == null) {
          Column = new global::LukeKennedy.LSQL.Net.ColumnID();
        }
        Column.MergeFrom(other.Column);
      }
      if (other.Descending != false) {
        Descending = other.Descending;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (column_ == null) {
              Column = new global::LukeKennedy.LSQL.Net.ColumnID();
            }
            input.ReadMessage(Column);
            break;
          }
          case 16: {
            Descending = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (column_ == null) {
              Column = new global::LukeKennedy.LSQL.Net.ColumnID();
            }
            input.ReadMessage(Column);
            break;
          }
          case 16: {
            Descending = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
