// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: query.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace LukeKennedy.LSQL.Net {

  /// <summary>Holder for reflection information generated from query.proto</summary>
  public static partial class QueryReflection {

    #region Descriptor
    /// <summary>File descriptor for query.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static QueryReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgtxdWVyeS5wcm90bxofZ29vZ2xlL3Byb3RvYnVmL3RpbWVzdGFtcC5wcm90",
            "byJqCgVRdWVyeRIKCgJpZBgBIAEoCRIQCgZkb21haW4YZSABKAlIABIXCgZw",
            "YWdpbmcYAiABKAsyBy5QYWdpbmcSGgoFd2hlcmUYAyABKAsyCy5XaGVyZUdy",
            "b3VwQg4KDGRvbWFpbl9zcGFjZSINCgtEb21haW5Kb2lucyJtCgpXaGVyZUdy",
            "b3VwEiQKCGVsZW1lbnRzGAEgAygLMhIuV2hlcmVHcm91cEVsZW1lbnQSFwoP",
            "bmVnYXRlX29wZXJhdG9yGAIgASgIEiAKCG9wZXJhdG9yGAMgASgOMg4uR3Jv",
            "dXBPcGVyYXRvciJaChFXaGVyZUdyb3VwRWxlbWVudBIcCgVmaWVsZBhlIAEo",
            "CzILLldoZXJlRmllbGRIABIcCgVncm91cBhmIAEoCzILLldoZXJlR3JvdXBI",
            "AEIJCgdlbGVtZW50ItQCCgpXaGVyZUZpZWxkEhIKCmZpZWxkX25hbWUYASAB",
            "KAkSGQoRbmVnYXRlX2NvbXBhcmF0b3IYAiABKAgSHwoKY29tcGFyYXRvchgD",
            "IAEoDjILLkNvbXBhcmF0b3ISEwoLZG9tYWluX25hbWUYBCABKAkSFgoMc3Ry",
            "aW5nX3ZhbHVlGGUgASgJSAASFQoLaW50NjRfdmFsdWUYZiABKANIABIWCgx1",
            "aW50NjRfdmFsdWUYZyABKARIABIWCgxkb3VibGVfdmFsdWUYaCABKAFIABIU",
            "Cgpib29sX3ZhbHVlGGkgASgISAASFQoLYnl0ZXNfdmFsdWUYaiABKAxIABIv",
            "Cgl0aW1lc3RhbXAYayABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1w",
            "SAASGwoIb3JkZXJpbmcYBSABKAsyCS5PcmRlcmluZ0IHCgV2YWx1ZSInCgZQ",
            "YWdpbmcSDQoFbGltaXQYASABKAQSDgoGb2Zmc2V0GAIgASgEIjAKCE9yZGVy",
            "aW5nEhAKCHByaW9yaXR5GAEgASgNEhIKCmRlc2NlbmRpbmcYAiABKAgqoQEK",
            "CkNvbXBhcmF0b3ISFgoSVU5LTk9XTl9DT01QQVJBVE9SEAASCQoFRVFVQUwQ",
            "ARIPCgtGVVpaWV9FUVVBTBACEhAKDEdSRUFURVJfVEhBThADEg0KCUxFU1Nf",
            "VEhBThAEEhkKFUdSRUFURVJfVEhBTl9PUl9FUVVBTBAFEhYKEkxFU1NfVEhB",
            "Tl9PUl9FUVVBTBAGEgsKB0lTX05VTEwQBypECg1Hcm91cE9wZXJhdG9yEhkK",
            "FVVOS05PV05fR1JPVVBPUEVSQVRPUhAAEgcKA0FORBABEgYKAk9SEAISBwoD",
            "WE9SEANCOVogZ2l0aHViLmNvbS9sbGtlbm5lZHkvbHNxbC9nb2xzcWyqAhRM",
            "dWtlS2VubmVkeS5MU1FMLk5ldGIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::LukeKennedy.LSQL.Net.Comparator), typeof(global::LukeKennedy.LSQL.Net.GroupOperator), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::LukeKennedy.LSQL.Net.Query), global::LukeKennedy.LSQL.Net.Query.Parser, new[]{ "Id", "Domain", "Paging", "Where" }, new[]{ "DomainSpace" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LukeKennedy.LSQL.Net.DomainJoins), global::LukeKennedy.LSQL.Net.DomainJoins.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LukeKennedy.LSQL.Net.WhereGroup), global::LukeKennedy.LSQL.Net.WhereGroup.Parser, new[]{ "Elements", "NegateOperator", "Operator" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LukeKennedy.LSQL.Net.WhereGroupElement), global::LukeKennedy.LSQL.Net.WhereGroupElement.Parser, new[]{ "Field", "Group" }, new[]{ "Element" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LukeKennedy.LSQL.Net.WhereField), global::LukeKennedy.LSQL.Net.WhereField.Parser, new[]{ "FieldName", "NegateComparator", "Comparator", "DomainName", "StringValue", "Int64Value", "Uint64Value", "DoubleValue", "BoolValue", "BytesValue", "Timestamp", "Ordering" }, new[]{ "Value" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LukeKennedy.LSQL.Net.Paging), global::LukeKennedy.LSQL.Net.Paging.Parser, new[]{ "Limit", "Offset" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LukeKennedy.LSQL.Net.Ordering), global::LukeKennedy.LSQL.Net.Ordering.Parser, new[]{ "Priority", "Descending" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum Comparator {
    /// <summary>
    /// Invalid, only used as a default in error states
    /// </summary>
    [pbr::OriginalName("UNKNOWN_COMPARATOR")] UnknownComparator = 0,
    [pbr::OriginalName("EQUAL")] Equal = 1,
    [pbr::OriginalName("FUZZY_EQUAL")] FuzzyEqual = 2,
    [pbr::OriginalName("GREATER_THAN")] GreaterThan = 3,
    [pbr::OriginalName("LESS_THAN")] LessThan = 4,
    [pbr::OriginalName("GREATER_THAN_OR_EQUAL")] GreaterThanOrEqual = 5,
    [pbr::OriginalName("LESS_THAN_OR_EQUAL")] LessThanOrEqual = 6,
    [pbr::OriginalName("IS_NULL")] IsNull = 7,
  }

  public enum GroupOperator {
    /// <summary>
    /// Invalid, only used as a default in error states
    /// </summary>
    [pbr::OriginalName("UNKNOWN_GROUPOPERATOR")] UnknownGroupoperator = 0,
    [pbr::OriginalName("AND")] And = 1,
    [pbr::OriginalName("OR")] Or = 2,
    [pbr::OriginalName("XOR")] Xor = 3,
  }

  #endregion

  #region Messages
  public sealed partial class Query : pb::IMessage<Query>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Query> _parser = new pb::MessageParser<Query>(() => new Query());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Query> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LukeKennedy.LSQL.Net.QueryReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Query() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Query(Query other) : this() {
      id_ = other.id_;
      paging_ = other.paging_ != null ? other.paging_.Clone() : null;
      where_ = other.where_ != null ? other.where_.Clone() : null;
      switch (other.DomainSpaceCase) {
        case DomainSpaceOneofCase.Domain:
          Domain = other.Domain;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Query Clone() {
      return new Query(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    /// <summary>
    /// A UUID generated for this query for idempotence and caching reasons, must be non-empty. 
    /// Repeated values may have their contents ignored by the server if it chooses to return cached content. 
    /// Servers must still correctly obey authC and authZ logic when choosing to return cached content based on ID.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "domain" field.</summary>
    public const int DomainFieldNumber = 101;
    /// <summary>
    /// DomainJoins domains = 102; // TODO
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Domain {
      get { return domainSpaceCase_ == DomainSpaceOneofCase.Domain ? (string) domainSpace_ : ""; }
      set {
        domainSpace_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        domainSpaceCase_ = DomainSpaceOneofCase.Domain;
      }
    }

    /// <summary>Field number for the "paging" field.</summary>
    public const int PagingFieldNumber = 2;
    private global::LukeKennedy.LSQL.Net.Paging paging_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LukeKennedy.LSQL.Net.Paging Paging {
      get { return paging_; }
      set {
        paging_ = value;
      }
    }

    /// <summary>Field number for the "where" field.</summary>
    public const int WhereFieldNumber = 3;
    private global::LukeKennedy.LSQL.Net.WhereGroup where_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LukeKennedy.LSQL.Net.WhereGroup Where {
      get { return where_; }
      set {
        where_ = value;
      }
    }

    private object domainSpace_;
    /// <summary>Enum of possible cases for the "domain_space" oneof.</summary>
    public enum DomainSpaceOneofCase {
      None = 0,
      Domain = 101,
    }
    private DomainSpaceOneofCase domainSpaceCase_ = DomainSpaceOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DomainSpaceOneofCase DomainSpaceCase {
      get { return domainSpaceCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDomainSpace() {
      domainSpaceCase_ = DomainSpaceOneofCase.None;
      domainSpace_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Query);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Query other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Domain != other.Domain) return false;
      if (!object.Equals(Paging, other.Paging)) return false;
      if (!object.Equals(Where, other.Where)) return false;
      if (DomainSpaceCase != other.DomainSpaceCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (domainSpaceCase_ == DomainSpaceOneofCase.Domain) hash ^= Domain.GetHashCode();
      if (paging_ != null) hash ^= Paging.GetHashCode();
      if (where_ != null) hash ^= Where.GetHashCode();
      hash ^= (int) domainSpaceCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (paging_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Paging);
      }
      if (where_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Where);
      }
      if (domainSpaceCase_ == DomainSpaceOneofCase.Domain) {
        output.WriteRawTag(170, 6);
        output.WriteString(Domain);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (paging_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Paging);
      }
      if (where_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Where);
      }
      if (domainSpaceCase_ == DomainSpaceOneofCase.Domain) {
        output.WriteRawTag(170, 6);
        output.WriteString(Domain);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (domainSpaceCase_ == DomainSpaceOneofCase.Domain) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Domain);
      }
      if (paging_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Paging);
      }
      if (where_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Where);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Query other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.paging_ != null) {
        if (paging_ == null) {
          Paging = new global::LukeKennedy.LSQL.Net.Paging();
        }
        Paging.MergeFrom(other.Paging);
      }
      if (other.where_ != null) {
        if (where_ == null) {
          Where = new global::LukeKennedy.LSQL.Net.WhereGroup();
        }
        Where.MergeFrom(other.Where);
      }
      switch (other.DomainSpaceCase) {
        case DomainSpaceOneofCase.Domain:
          Domain = other.Domain;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            if (paging_ == null) {
              Paging = new global::LukeKennedy.LSQL.Net.Paging();
            }
            input.ReadMessage(Paging);
            break;
          }
          case 26: {
            if (where_ == null) {
              Where = new global::LukeKennedy.LSQL.Net.WhereGroup();
            }
            input.ReadMessage(Where);
            break;
          }
          case 810: {
            Domain = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            if (paging_ == null) {
              Paging = new global::LukeKennedy.LSQL.Net.Paging();
            }
            input.ReadMessage(Paging);
            break;
          }
          case 26: {
            if (where_ == null) {
              Where = new global::LukeKennedy.LSQL.Net.WhereGroup();
            }
            input.ReadMessage(Where);
            break;
          }
          case 810: {
            Domain = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// TODO
  /// </summary>
  public sealed partial class DomainJoins : pb::IMessage<DomainJoins>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<DomainJoins> _parser = new pb::MessageParser<DomainJoins>(() => new DomainJoins());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DomainJoins> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LukeKennedy.LSQL.Net.QueryReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DomainJoins() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DomainJoins(DomainJoins other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DomainJoins Clone() {
      return new DomainJoins(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DomainJoins);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DomainJoins other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DomainJoins other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

  }

  public sealed partial class WhereGroup : pb::IMessage<WhereGroup>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<WhereGroup> _parser = new pb::MessageParser<WhereGroup>(() => new WhereGroup());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WhereGroup> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LukeKennedy.LSQL.Net.QueryReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WhereGroup() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WhereGroup(WhereGroup other) : this() {
      elements_ = other.elements_.Clone();
      negateOperator_ = other.negateOperator_;
      operator_ = other.operator_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WhereGroup Clone() {
      return new WhereGroup(this);
    }

    /// <summary>Field number for the "elements" field.</summary>
    public const int ElementsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::LukeKennedy.LSQL.Net.WhereGroupElement> _repeated_elements_codec
        = pb::FieldCodec.ForMessage(10, global::LukeKennedy.LSQL.Net.WhereGroupElement.Parser);
    private readonly pbc::RepeatedField<global::LukeKennedy.LSQL.Net.WhereGroupElement> elements_ = new pbc::RepeatedField<global::LukeKennedy.LSQL.Net.WhereGroupElement>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::LukeKennedy.LSQL.Net.WhereGroupElement> Elements {
      get { return elements_; }
    }

    /// <summary>Field number for the "negate_operator" field.</summary>
    public const int NegateOperatorFieldNumber = 2;
    private bool negateOperator_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool NegateOperator {
      get { return negateOperator_; }
      set {
        negateOperator_ = value;
      }
    }

    /// <summary>Field number for the "operator" field.</summary>
    public const int OperatorFieldNumber = 3;
    private global::LukeKennedy.LSQL.Net.GroupOperator operator_ = global::LukeKennedy.LSQL.Net.GroupOperator.UnknownGroupoperator;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LukeKennedy.LSQL.Net.GroupOperator Operator {
      get { return operator_; }
      set {
        operator_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WhereGroup);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WhereGroup other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!elements_.Equals(other.elements_)) return false;
      if (NegateOperator != other.NegateOperator) return false;
      if (Operator != other.Operator) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= elements_.GetHashCode();
      if (NegateOperator != false) hash ^= NegateOperator.GetHashCode();
      if (Operator != global::LukeKennedy.LSQL.Net.GroupOperator.UnknownGroupoperator) hash ^= Operator.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      elements_.WriteTo(output, _repeated_elements_codec);
      if (NegateOperator != false) {
        output.WriteRawTag(16);
        output.WriteBool(NegateOperator);
      }
      if (Operator != global::LukeKennedy.LSQL.Net.GroupOperator.UnknownGroupoperator) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Operator);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      elements_.WriteTo(ref output, _repeated_elements_codec);
      if (NegateOperator != false) {
        output.WriteRawTag(16);
        output.WriteBool(NegateOperator);
      }
      if (Operator != global::LukeKennedy.LSQL.Net.GroupOperator.UnknownGroupoperator) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Operator);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += elements_.CalculateSize(_repeated_elements_codec);
      if (NegateOperator != false) {
        size += 1 + 1;
      }
      if (Operator != global::LukeKennedy.LSQL.Net.GroupOperator.UnknownGroupoperator) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Operator);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WhereGroup other) {
      if (other == null) {
        return;
      }
      elements_.Add(other.elements_);
      if (other.NegateOperator != false) {
        NegateOperator = other.NegateOperator;
      }
      if (other.Operator != global::LukeKennedy.LSQL.Net.GroupOperator.UnknownGroupoperator) {
        Operator = other.Operator;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            elements_.AddEntriesFrom(input, _repeated_elements_codec);
            break;
          }
          case 16: {
            NegateOperator = input.ReadBool();
            break;
          }
          case 24: {
            Operator = (global::LukeKennedy.LSQL.Net.GroupOperator) input.ReadEnum();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            elements_.AddEntriesFrom(ref input, _repeated_elements_codec);
            break;
          }
          case 16: {
            NegateOperator = input.ReadBool();
            break;
          }
          case 24: {
            Operator = (global::LukeKennedy.LSQL.Net.GroupOperator) input.ReadEnum();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class WhereGroupElement : pb::IMessage<WhereGroupElement>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<WhereGroupElement> _parser = new pb::MessageParser<WhereGroupElement>(() => new WhereGroupElement());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WhereGroupElement> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LukeKennedy.LSQL.Net.QueryReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WhereGroupElement() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WhereGroupElement(WhereGroupElement other) : this() {
      switch (other.ElementCase) {
        case ElementOneofCase.Field:
          Field = other.Field.Clone();
          break;
        case ElementOneofCase.Group:
          Group = other.Group.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WhereGroupElement Clone() {
      return new WhereGroupElement(this);
    }

    /// <summary>Field number for the "field" field.</summary>
    public const int FieldFieldNumber = 101;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LukeKennedy.LSQL.Net.WhereField Field {
      get { return elementCase_ == ElementOneofCase.Field ? (global::LukeKennedy.LSQL.Net.WhereField) element_ : null; }
      set {
        element_ = value;
        elementCase_ = value == null ? ElementOneofCase.None : ElementOneofCase.Field;
      }
    }

    /// <summary>Field number for the "group" field.</summary>
    public const int GroupFieldNumber = 102;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LukeKennedy.LSQL.Net.WhereGroup Group {
      get { return elementCase_ == ElementOneofCase.Group ? (global::LukeKennedy.LSQL.Net.WhereGroup) element_ : null; }
      set {
        element_ = value;
        elementCase_ = value == null ? ElementOneofCase.None : ElementOneofCase.Group;
      }
    }

    private object element_;
    /// <summary>Enum of possible cases for the "element" oneof.</summary>
    public enum ElementOneofCase {
      None = 0,
      Field = 101,
      Group = 102,
    }
    private ElementOneofCase elementCase_ = ElementOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ElementOneofCase ElementCase {
      get { return elementCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearElement() {
      elementCase_ = ElementOneofCase.None;
      element_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WhereGroupElement);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WhereGroupElement other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Field, other.Field)) return false;
      if (!object.Equals(Group, other.Group)) return false;
      if (ElementCase != other.ElementCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (elementCase_ == ElementOneofCase.Field) hash ^= Field.GetHashCode();
      if (elementCase_ == ElementOneofCase.Group) hash ^= Group.GetHashCode();
      hash ^= (int) elementCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (elementCase_ == ElementOneofCase.Field) {
        output.WriteRawTag(170, 6);
        output.WriteMessage(Field);
      }
      if (elementCase_ == ElementOneofCase.Group) {
        output.WriteRawTag(178, 6);
        output.WriteMessage(Group);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (elementCase_ == ElementOneofCase.Field) {
        output.WriteRawTag(170, 6);
        output.WriteMessage(Field);
      }
      if (elementCase_ == ElementOneofCase.Group) {
        output.WriteRawTag(178, 6);
        output.WriteMessage(Group);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (elementCase_ == ElementOneofCase.Field) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Field);
      }
      if (elementCase_ == ElementOneofCase.Group) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Group);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WhereGroupElement other) {
      if (other == null) {
        return;
      }
      switch (other.ElementCase) {
        case ElementOneofCase.Field:
          if (Field == null) {
            Field = new global::LukeKennedy.LSQL.Net.WhereField();
          }
          Field.MergeFrom(other.Field);
          break;
        case ElementOneofCase.Group:
          if (Group == null) {
            Group = new global::LukeKennedy.LSQL.Net.WhereGroup();
          }
          Group.MergeFrom(other.Group);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 810: {
            global::LukeKennedy.LSQL.Net.WhereField subBuilder = new global::LukeKennedy.LSQL.Net.WhereField();
            if (elementCase_ == ElementOneofCase.Field) {
              subBuilder.MergeFrom(Field);
            }
            input.ReadMessage(subBuilder);
            Field = subBuilder;
            break;
          }
          case 818: {
            global::LukeKennedy.LSQL.Net.WhereGroup subBuilder = new global::LukeKennedy.LSQL.Net.WhereGroup();
            if (elementCase_ == ElementOneofCase.Group) {
              subBuilder.MergeFrom(Group);
            }
            input.ReadMessage(subBuilder);
            Group = subBuilder;
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 810: {
            global::LukeKennedy.LSQL.Net.WhereField subBuilder = new global::LukeKennedy.LSQL.Net.WhereField();
            if (elementCase_ == ElementOneofCase.Field) {
              subBuilder.MergeFrom(Field);
            }
            input.ReadMessage(subBuilder);
            Field = subBuilder;
            break;
          }
          case 818: {
            global::LukeKennedy.LSQL.Net.WhereGroup subBuilder = new global::LukeKennedy.LSQL.Net.WhereGroup();
            if (elementCase_ == ElementOneofCase.Group) {
              subBuilder.MergeFrom(Group);
            }
            input.ReadMessage(subBuilder);
            Group = subBuilder;
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class WhereField : pb::IMessage<WhereField>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<WhereField> _parser = new pb::MessageParser<WhereField>(() => new WhereField());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WhereField> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LukeKennedy.LSQL.Net.QueryReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WhereField() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WhereField(WhereField other) : this() {
      fieldName_ = other.fieldName_;
      negateComparator_ = other.negateComparator_;
      comparator_ = other.comparator_;
      domainName_ = other.domainName_;
      ordering_ = other.ordering_ != null ? other.ordering_.Clone() : null;
      switch (other.ValueCase) {
        case ValueOneofCase.StringValue:
          StringValue = other.StringValue;
          break;
        case ValueOneofCase.Int64Value:
          Int64Value = other.Int64Value;
          break;
        case ValueOneofCase.Uint64Value:
          Uint64Value = other.Uint64Value;
          break;
        case ValueOneofCase.DoubleValue:
          DoubleValue = other.DoubleValue;
          break;
        case ValueOneofCase.BoolValue:
          BoolValue = other.BoolValue;
          break;
        case ValueOneofCase.BytesValue:
          BytesValue = other.BytesValue;
          break;
        case ValueOneofCase.Timestamp:
          Timestamp = other.Timestamp.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WhereField Clone() {
      return new WhereField(this);
    }

    /// <summary>Field number for the "field_name" field.</summary>
    public const int FieldNameFieldNumber = 1;
    private string fieldName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FieldName {
      get { return fieldName_; }
      set {
        fieldName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "negate_comparator" field.</summary>
    public const int NegateComparatorFieldNumber = 2;
    private bool negateComparator_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool NegateComparator {
      get { return negateComparator_; }
      set {
        negateComparator_ = value;
      }
    }

    /// <summary>Field number for the "comparator" field.</summary>
    public const int ComparatorFieldNumber = 3;
    private global::LukeKennedy.LSQL.Net.Comparator comparator_ = global::LukeKennedy.LSQL.Net.Comparator.UnknownComparator;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LukeKennedy.LSQL.Net.Comparator Comparator {
      get { return comparator_; }
      set {
        comparator_ = value;
      }
    }

    /// <summary>Field number for the "domain_name" field.</summary>
    public const int DomainNameFieldNumber = 4;
    private string domainName_ = "";
    /// <summary>
    /// DomainName is optional if only one domain is present, but mandatory if multiple domains are present
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DomainName {
      get { return domainName_; }
      set {
        domainName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "string_value" field.</summary>
    public const int StringValueFieldNumber = 101;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StringValue {
      get { return valueCase_ == ValueOneofCase.StringValue ? (string) value_ : ""; }
      set {
        value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        valueCase_ = ValueOneofCase.StringValue;
      }
    }

    /// <summary>Field number for the "int64_value" field.</summary>
    public const int Int64ValueFieldNumber = 102;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Int64Value {
      get { return valueCase_ == ValueOneofCase.Int64Value ? (long) value_ : 0L; }
      set {
        value_ = value;
        valueCase_ = ValueOneofCase.Int64Value;
      }
    }

    /// <summary>Field number for the "uint64_value" field.</summary>
    public const int Uint64ValueFieldNumber = 103;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Uint64Value {
      get { return valueCase_ == ValueOneofCase.Uint64Value ? (ulong) value_ : 0UL; }
      set {
        value_ = value;
        valueCase_ = ValueOneofCase.Uint64Value;
      }
    }

    /// <summary>Field number for the "double_value" field.</summary>
    public const int DoubleValueFieldNumber = 104;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double DoubleValue {
      get { return valueCase_ == ValueOneofCase.DoubleValue ? (double) value_ : 0D; }
      set {
        value_ = value;
        valueCase_ = ValueOneofCase.DoubleValue;
      }
    }

    /// <summary>Field number for the "bool_value" field.</summary>
    public const int BoolValueFieldNumber = 105;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool BoolValue {
      get { return valueCase_ == ValueOneofCase.BoolValue ? (bool) value_ : false; }
      set {
        value_ = value;
        valueCase_ = ValueOneofCase.BoolValue;
      }
    }

    /// <summary>Field number for the "bytes_value" field.</summary>
    public const int BytesValueFieldNumber = 106;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString BytesValue {
      get { return valueCase_ == ValueOneofCase.BytesValue ? (pb::ByteString) value_ : pb::ByteString.Empty; }
      set {
        value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        valueCase_ = ValueOneofCase.BytesValue;
      }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 107;
    /// <summary>
    /// TODO: other basic types I'm forgetting?
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp Timestamp {
      get { return valueCase_ == ValueOneofCase.Timestamp ? (global::Google.Protobuf.WellKnownTypes.Timestamp) value_ : null; }
      set {
        value_ = value;
        valueCase_ = value == null ? ValueOneofCase.None : ValueOneofCase.Timestamp;
      }
    }

    /// <summary>Field number for the "ordering" field.</summary>
    public const int OrderingFieldNumber = 5;
    private global::LukeKennedy.LSQL.Net.Ordering ordering_;
    /// <summary>
    /// Ordering is optional, unless the RDBMS on the other end requires it,
    /// but it is the responsibility of the server directly interfacing with the RDBMS to understand the requirements of its data source.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LukeKennedy.LSQL.Net.Ordering Ordering {
      get { return ordering_; }
      set {
        ordering_ = value;
      }
    }

    private object value_;
    /// <summary>Enum of possible cases for the "value" oneof.</summary>
    public enum ValueOneofCase {
      None = 0,
      StringValue = 101,
      Int64Value = 102,
      Uint64Value = 103,
      DoubleValue = 104,
      BoolValue = 105,
      BytesValue = 106,
      Timestamp = 107,
    }
    private ValueOneofCase valueCase_ = ValueOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ValueOneofCase ValueCase {
      get { return valueCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearValue() {
      valueCase_ = ValueOneofCase.None;
      value_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WhereField);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WhereField other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FieldName != other.FieldName) return false;
      if (NegateComparator != other.NegateComparator) return false;
      if (Comparator != other.Comparator) return false;
      if (DomainName != other.DomainName) return false;
      if (StringValue != other.StringValue) return false;
      if (Int64Value != other.Int64Value) return false;
      if (Uint64Value != other.Uint64Value) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(DoubleValue, other.DoubleValue)) return false;
      if (BoolValue != other.BoolValue) return false;
      if (BytesValue != other.BytesValue) return false;
      if (!object.Equals(Timestamp, other.Timestamp)) return false;
      if (!object.Equals(Ordering, other.Ordering)) return false;
      if (ValueCase != other.ValueCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FieldName.Length != 0) hash ^= FieldName.GetHashCode();
      if (NegateComparator != false) hash ^= NegateComparator.GetHashCode();
      if (Comparator != global::LukeKennedy.LSQL.Net.Comparator.UnknownComparator) hash ^= Comparator.GetHashCode();
      if (DomainName.Length != 0) hash ^= DomainName.GetHashCode();
      if (valueCase_ == ValueOneofCase.StringValue) hash ^= StringValue.GetHashCode();
      if (valueCase_ == ValueOneofCase.Int64Value) hash ^= Int64Value.GetHashCode();
      if (valueCase_ == ValueOneofCase.Uint64Value) hash ^= Uint64Value.GetHashCode();
      if (valueCase_ == ValueOneofCase.DoubleValue) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(DoubleValue);
      if (valueCase_ == ValueOneofCase.BoolValue) hash ^= BoolValue.GetHashCode();
      if (valueCase_ == ValueOneofCase.BytesValue) hash ^= BytesValue.GetHashCode();
      if (valueCase_ == ValueOneofCase.Timestamp) hash ^= Timestamp.GetHashCode();
      if (ordering_ != null) hash ^= Ordering.GetHashCode();
      hash ^= (int) valueCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (FieldName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FieldName);
      }
      if (NegateComparator != false) {
        output.WriteRawTag(16);
        output.WriteBool(NegateComparator);
      }
      if (Comparator != global::LukeKennedy.LSQL.Net.Comparator.UnknownComparator) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Comparator);
      }
      if (DomainName.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(DomainName);
      }
      if (ordering_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Ordering);
      }
      if (valueCase_ == ValueOneofCase.StringValue) {
        output.WriteRawTag(170, 6);
        output.WriteString(StringValue);
      }
      if (valueCase_ == ValueOneofCase.Int64Value) {
        output.WriteRawTag(176, 6);
        output.WriteInt64(Int64Value);
      }
      if (valueCase_ == ValueOneofCase.Uint64Value) {
        output.WriteRawTag(184, 6);
        output.WriteUInt64(Uint64Value);
      }
      if (valueCase_ == ValueOneofCase.DoubleValue) {
        output.WriteRawTag(193, 6);
        output.WriteDouble(DoubleValue);
      }
      if (valueCase_ == ValueOneofCase.BoolValue) {
        output.WriteRawTag(200, 6);
        output.WriteBool(BoolValue);
      }
      if (valueCase_ == ValueOneofCase.BytesValue) {
        output.WriteRawTag(210, 6);
        output.WriteBytes(BytesValue);
      }
      if (valueCase_ == ValueOneofCase.Timestamp) {
        output.WriteRawTag(218, 6);
        output.WriteMessage(Timestamp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (FieldName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FieldName);
      }
      if (NegateComparator != false) {
        output.WriteRawTag(16);
        output.WriteBool(NegateComparator);
      }
      if (Comparator != global::LukeKennedy.LSQL.Net.Comparator.UnknownComparator) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Comparator);
      }
      if (DomainName.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(DomainName);
      }
      if (ordering_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Ordering);
      }
      if (valueCase_ == ValueOneofCase.StringValue) {
        output.WriteRawTag(170, 6);
        output.WriteString(StringValue);
      }
      if (valueCase_ == ValueOneofCase.Int64Value) {
        output.WriteRawTag(176, 6);
        output.WriteInt64(Int64Value);
      }
      if (valueCase_ == ValueOneofCase.Uint64Value) {
        output.WriteRawTag(184, 6);
        output.WriteUInt64(Uint64Value);
      }
      if (valueCase_ == ValueOneofCase.DoubleValue) {
        output.WriteRawTag(193, 6);
        output.WriteDouble(DoubleValue);
      }
      if (valueCase_ == ValueOneofCase.BoolValue) {
        output.WriteRawTag(200, 6);
        output.WriteBool(BoolValue);
      }
      if (valueCase_ == ValueOneofCase.BytesValue) {
        output.WriteRawTag(210, 6);
        output.WriteBytes(BytesValue);
      }
      if (valueCase_ == ValueOneofCase.Timestamp) {
        output.WriteRawTag(218, 6);
        output.WriteMessage(Timestamp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FieldName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FieldName);
      }
      if (NegateComparator != false) {
        size += 1 + 1;
      }
      if (Comparator != global::LukeKennedy.LSQL.Net.Comparator.UnknownComparator) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Comparator);
      }
      if (DomainName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DomainName);
      }
      if (valueCase_ == ValueOneofCase.StringValue) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(StringValue);
      }
      if (valueCase_ == ValueOneofCase.Int64Value) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(Int64Value);
      }
      if (valueCase_ == ValueOneofCase.Uint64Value) {
        size += 2 + pb::CodedOutputStream.ComputeUInt64Size(Uint64Value);
      }
      if (valueCase_ == ValueOneofCase.DoubleValue) {
        size += 2 + 8;
      }
      if (valueCase_ == ValueOneofCase.BoolValue) {
        size += 2 + 1;
      }
      if (valueCase_ == ValueOneofCase.BytesValue) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(BytesValue);
      }
      if (valueCase_ == ValueOneofCase.Timestamp) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Timestamp);
      }
      if (ordering_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Ordering);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WhereField other) {
      if (other == null) {
        return;
      }
      if (other.FieldName.Length != 0) {
        FieldName = other.FieldName;
      }
      if (other.NegateComparator != false) {
        NegateComparator = other.NegateComparator;
      }
      if (other.Comparator != global::LukeKennedy.LSQL.Net.Comparator.UnknownComparator) {
        Comparator = other.Comparator;
      }
      if (other.DomainName.Length != 0) {
        DomainName = other.DomainName;
      }
      if (other.ordering_ != null) {
        if (ordering_ == null) {
          Ordering = new global::LukeKennedy.LSQL.Net.Ordering();
        }
        Ordering.MergeFrom(other.Ordering);
      }
      switch (other.ValueCase) {
        case ValueOneofCase.StringValue:
          StringValue = other.StringValue;
          break;
        case ValueOneofCase.Int64Value:
          Int64Value = other.Int64Value;
          break;
        case ValueOneofCase.Uint64Value:
          Uint64Value = other.Uint64Value;
          break;
        case ValueOneofCase.DoubleValue:
          DoubleValue = other.DoubleValue;
          break;
        case ValueOneofCase.BoolValue:
          BoolValue = other.BoolValue;
          break;
        case ValueOneofCase.BytesValue:
          BytesValue = other.BytesValue;
          break;
        case ValueOneofCase.Timestamp:
          if (Timestamp == null) {
            Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
          }
          Timestamp.MergeFrom(other.Timestamp);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            FieldName = input.ReadString();
            break;
          }
          case 16: {
            NegateComparator = input.ReadBool();
            break;
          }
          case 24: {
            Comparator = (global::LukeKennedy.LSQL.Net.Comparator) input.ReadEnum();
            break;
          }
          case 34: {
            DomainName = input.ReadString();
            break;
          }
          case 42: {
            if (ordering_ == null) {
              Ordering = new global::LukeKennedy.LSQL.Net.Ordering();
            }
            input.ReadMessage(Ordering);
            break;
          }
          case 810: {
            StringValue = input.ReadString();
            break;
          }
          case 816: {
            Int64Value = input.ReadInt64();
            break;
          }
          case 824: {
            Uint64Value = input.ReadUInt64();
            break;
          }
          case 833: {
            DoubleValue = input.ReadDouble();
            break;
          }
          case 840: {
            BoolValue = input.ReadBool();
            break;
          }
          case 850: {
            BytesValue = input.ReadBytes();
            break;
          }
          case 858: {
            global::Google.Protobuf.WellKnownTypes.Timestamp subBuilder = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            if (valueCase_ == ValueOneofCase.Timestamp) {
              subBuilder.MergeFrom(Timestamp);
            }
            input.ReadMessage(subBuilder);
            Timestamp = subBuilder;
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            FieldName = input.ReadString();
            break;
          }
          case 16: {
            NegateComparator = input.ReadBool();
            break;
          }
          case 24: {
            Comparator = (global::LukeKennedy.LSQL.Net.Comparator) input.ReadEnum();
            break;
          }
          case 34: {
            DomainName = input.ReadString();
            break;
          }
          case 42: {
            if (ordering_ == null) {
              Ordering = new global::LukeKennedy.LSQL.Net.Ordering();
            }
            input.ReadMessage(Ordering);
            break;
          }
          case 810: {
            StringValue = input.ReadString();
            break;
          }
          case 816: {
            Int64Value = input.ReadInt64();
            break;
          }
          case 824: {
            Uint64Value = input.ReadUInt64();
            break;
          }
          case 833: {
            DoubleValue = input.ReadDouble();
            break;
          }
          case 840: {
            BoolValue = input.ReadBool();
            break;
          }
          case 850: {
            BytesValue = input.ReadBytes();
            break;
          }
          case 858: {
            global::Google.Protobuf.WellKnownTypes.Timestamp subBuilder = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            if (valueCase_ == ValueOneofCase.Timestamp) {
              subBuilder.MergeFrom(Timestamp);
            }
            input.ReadMessage(subBuilder);
            Timestamp = subBuilder;
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class Paging : pb::IMessage<Paging>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Paging> _parser = new pb::MessageParser<Paging>(() => new Paging());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Paging> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LukeKennedy.LSQL.Net.QueryReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Paging() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Paging(Paging other) : this() {
      limit_ = other.limit_;
      offset_ = other.offset_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Paging Clone() {
      return new Paging(this);
    }

    /// <summary>Field number for the "limit" field.</summary>
    public const int LimitFieldNumber = 1;
    private ulong limit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Limit {
      get { return limit_; }
      set {
        limit_ = value;
      }
    }

    /// <summary>Field number for the "offset" field.</summary>
    public const int OffsetFieldNumber = 2;
    private ulong offset_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Offset {
      get { return offset_; }
      set {
        offset_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Paging);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Paging other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Limit != other.Limit) return false;
      if (Offset != other.Offset) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Limit != 0UL) hash ^= Limit.GetHashCode();
      if (Offset != 0UL) hash ^= Offset.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Limit != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Limit);
      }
      if (Offset != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(Offset);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Limit != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Limit);
      }
      if (Offset != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(Offset);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Limit != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Limit);
      }
      if (Offset != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Offset);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Paging other) {
      if (other == null) {
        return;
      }
      if (other.Limit != 0UL) {
        Limit = other.Limit;
      }
      if (other.Offset != 0UL) {
        Offset = other.Offset;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Limit = input.ReadUInt64();
            break;
          }
          case 16: {
            Offset = input.ReadUInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Limit = input.ReadUInt64();
            break;
          }
          case 16: {
            Offset = input.ReadUInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class Ordering : pb::IMessage<Ordering>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Ordering> _parser = new pb::MessageParser<Ordering>(() => new Ordering());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Ordering> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LukeKennedy.LSQL.Net.QueryReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Ordering() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Ordering(Ordering other) : this() {
      priority_ = other.priority_;
      descending_ = other.descending_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Ordering Clone() {
      return new Ordering(this);
    }

    /// <summary>Field number for the "priority" field.</summary>
    public const int PriorityFieldNumber = 1;
    private uint priority_;
    /// <summary>
    /// Priority must be set to a unique value if ordering is present for an item, duplicate priorities within a request is considered an error
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Priority {
      get { return priority_; }
      set {
        priority_ = value;
      }
    }

    /// <summary>Field number for the "descending" field.</summary>
    public const int DescendingFieldNumber = 2;
    private bool descending_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Descending {
      get { return descending_; }
      set {
        descending_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Ordering);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Ordering other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Priority != other.Priority) return false;
      if (Descending != other.Descending) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Priority != 0) hash ^= Priority.GetHashCode();
      if (Descending != false) hash ^= Descending.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Priority != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Priority);
      }
      if (Descending != false) {
        output.WriteRawTag(16);
        output.WriteBool(Descending);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Priority != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Priority);
      }
      if (Descending != false) {
        output.WriteRawTag(16);
        output.WriteBool(Descending);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Priority != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Priority);
      }
      if (Descending != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Ordering other) {
      if (other == null) {
        return;
      }
      if (other.Priority != 0) {
        Priority = other.Priority;
      }
      if (other.Descending != false) {
        Descending = other.Descending;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Priority = input.ReadUInt32();
            break;
          }
          case 16: {
            Descending = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Priority = input.ReadUInt32();
            break;
          }
          case 16: {
            Descending = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
