// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: where.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace LukeKennedy.LSQL.Net {

  /// <summary>Holder for reflection information generated from where.proto</summary>
  public static partial class WhereReflection {

    #region Descriptor
    /// <summary>File descriptor for where.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static WhereReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cgt3aGVyZS5wcm90bxofZ29vZ2xlL3Byb3RvYnVmL3RpbWVzdGFtcC5wcm90",
            "bxoMc2VsZWN0LnByb3RvImMKBUdyb3VwEh8KCGVsZW1lbnRzGAEgAygLMg0u",
            "R3JvdXBFbGVtZW50EhcKD25lZ2F0ZV9vcGVyYXRvchgCIAEoCBIgCghvcGVy",
            "YXRvchgDIAEoDjIOLkdyb3VwT3BlcmF0b3IiSwoMR3JvdXBFbGVtZW50EhcK",
            "BWZpZWxkGGUgASgLMgYuRmllbGRIABIXCgVncm91cBhmIAEoCzIGLkdyb3Vw",
            "SABCCQoHZWxlbWVudCKlAgoFRmllbGQSGQoGY29sdW1uGAEgASgLMgkuQ29s",
            "dW1uSUQSGQoRbmVnYXRlX2NvbXBhcmF0b3IYAiABKAgSHwoKY29tcGFyYXRv",
            "chgDIAEoDjILLkNvbXBhcmF0b3ISFgoMc3RyaW5nX3ZhbHVlGGUgASgJSAAS",
            "FQoLaW50NjRfdmFsdWUYZiABKANIABIWCgx1aW50NjRfdmFsdWUYZyABKARI",
            "ABIWCgxkb3VibGVfdmFsdWUYaCABKAFIABIUCgpib29sX3ZhbHVlGGkgASgI",
            "SAASFQoLYnl0ZXNfdmFsdWUYaiABKAxIABIwCgp0aW1lX3ZhbHVlGGsgASgL",
            "MhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcEgAQgcKBXZhbHVlKqEBCgpD",
            "b21wYXJhdG9yEhYKElVOS05PV05fQ09NUEFSQVRPUhAAEgkKBUVRVUFMEAES",
            "DwoLRlVaWllfRVFVQUwQAhIQCgxHUkVBVEVSX1RIQU4QAxINCglMRVNTX1RI",
            "QU4QBBIZChVHUkVBVEVSX1RIQU5fT1JfRVFVQUwQBRIWChJMRVNTX1RIQU5f",
            "T1JfRVFVQUwQBhILCgdJU19OVUxMEAcqRAoNR3JvdXBPcGVyYXRvchIZChVV",
            "TktOT1dOX0dST1VQT1BFUkFUT1IQABIHCgNBTkQQARIGCgJPUhACEgcKA1hP",
            "UhADQjlaIGdpdGh1Yi5jb20vbGxrZW5uZWR5L2xzcWwvZ29sc3FsqgIUTHVr",
            "ZUtlbm5lZHkuTFNRTC5OZXRiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, global::LukeKennedy.LSQL.Net.SelectReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::LukeKennedy.LSQL.Net.Comparator), typeof(global::LukeKennedy.LSQL.Net.GroupOperator), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::LukeKennedy.LSQL.Net.Group), global::LukeKennedy.LSQL.Net.Group.Parser, new[]{ "Elements", "NegateOperator", "Operator" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LukeKennedy.LSQL.Net.GroupElement), global::LukeKennedy.LSQL.Net.GroupElement.Parser, new[]{ "Field", "Group" }, new[]{ "Element" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::LukeKennedy.LSQL.Net.Field), global::LukeKennedy.LSQL.Net.Field.Parser, new[]{ "Column", "NegateComparator", "Comparator", "StringValue", "Int64Value", "Uint64Value", "DoubleValue", "BoolValue", "BytesValue", "TimeValue" }, new[]{ "Value" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum Comparator {
    /// <summary>
    /// Invalid, only used as a default in error states
    /// </summary>
    [pbr::OriginalName("UNKNOWN_COMPARATOR")] UnknownComparator = 0,
    [pbr::OriginalName("EQUAL")] Equal = 1,
    [pbr::OriginalName("FUZZY_EQUAL")] FuzzyEqual = 2,
    [pbr::OriginalName("GREATER_THAN")] GreaterThan = 3,
    [pbr::OriginalName("LESS_THAN")] LessThan = 4,
    [pbr::OriginalName("GREATER_THAN_OR_EQUAL")] GreaterThanOrEqual = 5,
    [pbr::OriginalName("LESS_THAN_OR_EQUAL")] LessThanOrEqual = 6,
    [pbr::OriginalName("IS_NULL")] IsNull = 7,
  }

  public enum GroupOperator {
    /// <summary>
    /// Invalid, only used as a default in error states
    /// </summary>
    [pbr::OriginalName("UNKNOWN_GROUPOPERATOR")] UnknownGroupoperator = 0,
    [pbr::OriginalName("AND")] And = 1,
    [pbr::OriginalName("OR")] Or = 2,
    [pbr::OriginalName("XOR")] Xor = 3,
  }

  #endregion

  #region Messages
  public sealed partial class Group : pb::IMessage<Group>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Group> _parser = new pb::MessageParser<Group>(() => new Group());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Group> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LukeKennedy.LSQL.Net.WhereReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Group() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Group(Group other) : this() {
      elements_ = other.elements_.Clone();
      negateOperator_ = other.negateOperator_;
      operator_ = other.operator_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Group Clone() {
      return new Group(this);
    }

    /// <summary>Field number for the "elements" field.</summary>
    public const int ElementsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::LukeKennedy.LSQL.Net.GroupElement> _repeated_elements_codec
        = pb::FieldCodec.ForMessage(10, global::LukeKennedy.LSQL.Net.GroupElement.Parser);
    private readonly pbc::RepeatedField<global::LukeKennedy.LSQL.Net.GroupElement> elements_ = new pbc::RepeatedField<global::LukeKennedy.LSQL.Net.GroupElement>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::LukeKennedy.LSQL.Net.GroupElement> Elements {
      get { return elements_; }
    }

    /// <summary>Field number for the "negate_operator" field.</summary>
    public const int NegateOperatorFieldNumber = 2;
    private bool negateOperator_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool NegateOperator {
      get { return negateOperator_; }
      set {
        negateOperator_ = value;
      }
    }

    /// <summary>Field number for the "operator" field.</summary>
    public const int OperatorFieldNumber = 3;
    private global::LukeKennedy.LSQL.Net.GroupOperator operator_ = global::LukeKennedy.LSQL.Net.GroupOperator.UnknownGroupoperator;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LukeKennedy.LSQL.Net.GroupOperator Operator {
      get { return operator_; }
      set {
        operator_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Group);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Group other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!elements_.Equals(other.elements_)) return false;
      if (NegateOperator != other.NegateOperator) return false;
      if (Operator != other.Operator) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= elements_.GetHashCode();
      if (NegateOperator != false) hash ^= NegateOperator.GetHashCode();
      if (Operator != global::LukeKennedy.LSQL.Net.GroupOperator.UnknownGroupoperator) hash ^= Operator.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      elements_.WriteTo(output, _repeated_elements_codec);
      if (NegateOperator != false) {
        output.WriteRawTag(16);
        output.WriteBool(NegateOperator);
      }
      if (Operator != global::LukeKennedy.LSQL.Net.GroupOperator.UnknownGroupoperator) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Operator);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      elements_.WriteTo(ref output, _repeated_elements_codec);
      if (NegateOperator != false) {
        output.WriteRawTag(16);
        output.WriteBool(NegateOperator);
      }
      if (Operator != global::LukeKennedy.LSQL.Net.GroupOperator.UnknownGroupoperator) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Operator);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += elements_.CalculateSize(_repeated_elements_codec);
      if (NegateOperator != false) {
        size += 1 + 1;
      }
      if (Operator != global::LukeKennedy.LSQL.Net.GroupOperator.UnknownGroupoperator) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Operator);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Group other) {
      if (other == null) {
        return;
      }
      elements_.Add(other.elements_);
      if (other.NegateOperator != false) {
        NegateOperator = other.NegateOperator;
      }
      if (other.Operator != global::LukeKennedy.LSQL.Net.GroupOperator.UnknownGroupoperator) {
        Operator = other.Operator;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            elements_.AddEntriesFrom(input, _repeated_elements_codec);
            break;
          }
          case 16: {
            NegateOperator = input.ReadBool();
            break;
          }
          case 24: {
            Operator = (global::LukeKennedy.LSQL.Net.GroupOperator) input.ReadEnum();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            elements_.AddEntriesFrom(ref input, _repeated_elements_codec);
            break;
          }
          case 16: {
            NegateOperator = input.ReadBool();
            break;
          }
          case 24: {
            Operator = (global::LukeKennedy.LSQL.Net.GroupOperator) input.ReadEnum();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class GroupElement : pb::IMessage<GroupElement>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<GroupElement> _parser = new pb::MessageParser<GroupElement>(() => new GroupElement());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GroupElement> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LukeKennedy.LSQL.Net.WhereReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GroupElement() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GroupElement(GroupElement other) : this() {
      switch (other.ElementCase) {
        case ElementOneofCase.Field:
          Field = other.Field.Clone();
          break;
        case ElementOneofCase.Group:
          Group = other.Group.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GroupElement Clone() {
      return new GroupElement(this);
    }

    /// <summary>Field number for the "field" field.</summary>
    public const int FieldFieldNumber = 101;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LukeKennedy.LSQL.Net.Field Field {
      get { return elementCase_ == ElementOneofCase.Field ? (global::LukeKennedy.LSQL.Net.Field) element_ : null; }
      set {
        element_ = value;
        elementCase_ = value == null ? ElementOneofCase.None : ElementOneofCase.Field;
      }
    }

    /// <summary>Field number for the "group" field.</summary>
    public const int GroupFieldNumber = 102;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LukeKennedy.LSQL.Net.Group Group {
      get { return elementCase_ == ElementOneofCase.Group ? (global::LukeKennedy.LSQL.Net.Group) element_ : null; }
      set {
        element_ = value;
        elementCase_ = value == null ? ElementOneofCase.None : ElementOneofCase.Group;
      }
    }

    private object element_;
    /// <summary>Enum of possible cases for the "element" oneof.</summary>
    public enum ElementOneofCase {
      None = 0,
      Field = 101,
      Group = 102,
    }
    private ElementOneofCase elementCase_ = ElementOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ElementOneofCase ElementCase {
      get { return elementCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearElement() {
      elementCase_ = ElementOneofCase.None;
      element_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GroupElement);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GroupElement other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Field, other.Field)) return false;
      if (!object.Equals(Group, other.Group)) return false;
      if (ElementCase != other.ElementCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (elementCase_ == ElementOneofCase.Field) hash ^= Field.GetHashCode();
      if (elementCase_ == ElementOneofCase.Group) hash ^= Group.GetHashCode();
      hash ^= (int) elementCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (elementCase_ == ElementOneofCase.Field) {
        output.WriteRawTag(170, 6);
        output.WriteMessage(Field);
      }
      if (elementCase_ == ElementOneofCase.Group) {
        output.WriteRawTag(178, 6);
        output.WriteMessage(Group);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (elementCase_ == ElementOneofCase.Field) {
        output.WriteRawTag(170, 6);
        output.WriteMessage(Field);
      }
      if (elementCase_ == ElementOneofCase.Group) {
        output.WriteRawTag(178, 6);
        output.WriteMessage(Group);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (elementCase_ == ElementOneofCase.Field) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Field);
      }
      if (elementCase_ == ElementOneofCase.Group) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Group);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GroupElement other) {
      if (other == null) {
        return;
      }
      switch (other.ElementCase) {
        case ElementOneofCase.Field:
          if (Field == null) {
            Field = new global::LukeKennedy.LSQL.Net.Field();
          }
          Field.MergeFrom(other.Field);
          break;
        case ElementOneofCase.Group:
          if (Group == null) {
            Group = new global::LukeKennedy.LSQL.Net.Group();
          }
          Group.MergeFrom(other.Group);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 810: {
            global::LukeKennedy.LSQL.Net.Field subBuilder = new global::LukeKennedy.LSQL.Net.Field();
            if (elementCase_ == ElementOneofCase.Field) {
              subBuilder.MergeFrom(Field);
            }
            input.ReadMessage(subBuilder);
            Field = subBuilder;
            break;
          }
          case 818: {
            global::LukeKennedy.LSQL.Net.Group subBuilder = new global::LukeKennedy.LSQL.Net.Group();
            if (elementCase_ == ElementOneofCase.Group) {
              subBuilder.MergeFrom(Group);
            }
            input.ReadMessage(subBuilder);
            Group = subBuilder;
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 810: {
            global::LukeKennedy.LSQL.Net.Field subBuilder = new global::LukeKennedy.LSQL.Net.Field();
            if (elementCase_ == ElementOneofCase.Field) {
              subBuilder.MergeFrom(Field);
            }
            input.ReadMessage(subBuilder);
            Field = subBuilder;
            break;
          }
          case 818: {
            global::LukeKennedy.LSQL.Net.Group subBuilder = new global::LukeKennedy.LSQL.Net.Group();
            if (elementCase_ == ElementOneofCase.Group) {
              subBuilder.MergeFrom(Group);
            }
            input.ReadMessage(subBuilder);
            Group = subBuilder;
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class Field : pb::IMessage<Field>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Field> _parser = new pb::MessageParser<Field>(() => new Field());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Field> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::LukeKennedy.LSQL.Net.WhereReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Field() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Field(Field other) : this() {
      column_ = other.column_ != null ? other.column_.Clone() : null;
      negateComparator_ = other.negateComparator_;
      comparator_ = other.comparator_;
      switch (other.ValueCase) {
        case ValueOneofCase.StringValue:
          StringValue = other.StringValue;
          break;
        case ValueOneofCase.Int64Value:
          Int64Value = other.Int64Value;
          break;
        case ValueOneofCase.Uint64Value:
          Uint64Value = other.Uint64Value;
          break;
        case ValueOneofCase.DoubleValue:
          DoubleValue = other.DoubleValue;
          break;
        case ValueOneofCase.BoolValue:
          BoolValue = other.BoolValue;
          break;
        case ValueOneofCase.BytesValue:
          BytesValue = other.BytesValue;
          break;
        case ValueOneofCase.TimeValue:
          TimeValue = other.TimeValue.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Field Clone() {
      return new Field(this);
    }

    /// <summary>Field number for the "column" field.</summary>
    public const int ColumnFieldNumber = 1;
    private global::LukeKennedy.LSQL.Net.ColumnID column_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LukeKennedy.LSQL.Net.ColumnID Column {
      get { return column_; }
      set {
        column_ = value;
      }
    }

    /// <summary>Field number for the "negate_comparator" field.</summary>
    public const int NegateComparatorFieldNumber = 2;
    private bool negateComparator_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool NegateComparator {
      get { return negateComparator_; }
      set {
        negateComparator_ = value;
      }
    }

    /// <summary>Field number for the "comparator" field.</summary>
    public const int ComparatorFieldNumber = 3;
    private global::LukeKennedy.LSQL.Net.Comparator comparator_ = global::LukeKennedy.LSQL.Net.Comparator.UnknownComparator;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::LukeKennedy.LSQL.Net.Comparator Comparator {
      get { return comparator_; }
      set {
        comparator_ = value;
      }
    }

    /// <summary>Field number for the "string_value" field.</summary>
    public const int StringValueFieldNumber = 101;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StringValue {
      get { return valueCase_ == ValueOneofCase.StringValue ? (string) value_ : ""; }
      set {
        value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        valueCase_ = ValueOneofCase.StringValue;
      }
    }

    /// <summary>Field number for the "int64_value" field.</summary>
    public const int Int64ValueFieldNumber = 102;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Int64Value {
      get { return valueCase_ == ValueOneofCase.Int64Value ? (long) value_ : 0L; }
      set {
        value_ = value;
        valueCase_ = ValueOneofCase.Int64Value;
      }
    }

    /// <summary>Field number for the "uint64_value" field.</summary>
    public const int Uint64ValueFieldNumber = 103;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Uint64Value {
      get { return valueCase_ == ValueOneofCase.Uint64Value ? (ulong) value_ : 0UL; }
      set {
        value_ = value;
        valueCase_ = ValueOneofCase.Uint64Value;
      }
    }

    /// <summary>Field number for the "double_value" field.</summary>
    public const int DoubleValueFieldNumber = 104;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double DoubleValue {
      get { return valueCase_ == ValueOneofCase.DoubleValue ? (double) value_ : 0D; }
      set {
        value_ = value;
        valueCase_ = ValueOneofCase.DoubleValue;
      }
    }

    /// <summary>Field number for the "bool_value" field.</summary>
    public const int BoolValueFieldNumber = 105;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool BoolValue {
      get { return valueCase_ == ValueOneofCase.BoolValue ? (bool) value_ : false; }
      set {
        value_ = value;
        valueCase_ = ValueOneofCase.BoolValue;
      }
    }

    /// <summary>Field number for the "bytes_value" field.</summary>
    public const int BytesValueFieldNumber = 106;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString BytesValue {
      get { return valueCase_ == ValueOneofCase.BytesValue ? (pb::ByteString) value_ : pb::ByteString.Empty; }
      set {
        value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        valueCase_ = ValueOneofCase.BytesValue;
      }
    }

    /// <summary>Field number for the "time_value" field.</summary>
    public const int TimeValueFieldNumber = 107;
    /// <summary>
    /// TODO: other basic types I'm forgetting?
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp TimeValue {
      get { return valueCase_ == ValueOneofCase.TimeValue ? (global::Google.Protobuf.WellKnownTypes.Timestamp) value_ : null; }
      set {
        value_ = value;
        valueCase_ = value == null ? ValueOneofCase.None : ValueOneofCase.TimeValue;
      }
    }

    private object value_;
    /// <summary>Enum of possible cases for the "value" oneof.</summary>
    public enum ValueOneofCase {
      None = 0,
      StringValue = 101,
      Int64Value = 102,
      Uint64Value = 103,
      DoubleValue = 104,
      BoolValue = 105,
      BytesValue = 106,
      TimeValue = 107,
    }
    private ValueOneofCase valueCase_ = ValueOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ValueOneofCase ValueCase {
      get { return valueCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearValue() {
      valueCase_ = ValueOneofCase.None;
      value_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Field);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Field other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Column, other.Column)) return false;
      if (NegateComparator != other.NegateComparator) return false;
      if (Comparator != other.Comparator) return false;
      if (StringValue != other.StringValue) return false;
      if (Int64Value != other.Int64Value) return false;
      if (Uint64Value != other.Uint64Value) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(DoubleValue, other.DoubleValue)) return false;
      if (BoolValue != other.BoolValue) return false;
      if (BytesValue != other.BytesValue) return false;
      if (!object.Equals(TimeValue, other.TimeValue)) return false;
      if (ValueCase != other.ValueCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (column_ != null) hash ^= Column.GetHashCode();
      if (NegateComparator != false) hash ^= NegateComparator.GetHashCode();
      if (Comparator != global::LukeKennedy.LSQL.Net.Comparator.UnknownComparator) hash ^= Comparator.GetHashCode();
      if (valueCase_ == ValueOneofCase.StringValue) hash ^= StringValue.GetHashCode();
      if (valueCase_ == ValueOneofCase.Int64Value) hash ^= Int64Value.GetHashCode();
      if (valueCase_ == ValueOneofCase.Uint64Value) hash ^= Uint64Value.GetHashCode();
      if (valueCase_ == ValueOneofCase.DoubleValue) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(DoubleValue);
      if (valueCase_ == ValueOneofCase.BoolValue) hash ^= BoolValue.GetHashCode();
      if (valueCase_ == ValueOneofCase.BytesValue) hash ^= BytesValue.GetHashCode();
      if (valueCase_ == ValueOneofCase.TimeValue) hash ^= TimeValue.GetHashCode();
      hash ^= (int) valueCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (column_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Column);
      }
      if (NegateComparator != false) {
        output.WriteRawTag(16);
        output.WriteBool(NegateComparator);
      }
      if (Comparator != global::LukeKennedy.LSQL.Net.Comparator.UnknownComparator) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Comparator);
      }
      if (valueCase_ == ValueOneofCase.StringValue) {
        output.WriteRawTag(170, 6);
        output.WriteString(StringValue);
      }
      if (valueCase_ == ValueOneofCase.Int64Value) {
        output.WriteRawTag(176, 6);
        output.WriteInt64(Int64Value);
      }
      if (valueCase_ == ValueOneofCase.Uint64Value) {
        output.WriteRawTag(184, 6);
        output.WriteUInt64(Uint64Value);
      }
      if (valueCase_ == ValueOneofCase.DoubleValue) {
        output.WriteRawTag(193, 6);
        output.WriteDouble(DoubleValue);
      }
      if (valueCase_ == ValueOneofCase.BoolValue) {
        output.WriteRawTag(200, 6);
        output.WriteBool(BoolValue);
      }
      if (valueCase_ == ValueOneofCase.BytesValue) {
        output.WriteRawTag(210, 6);
        output.WriteBytes(BytesValue);
      }
      if (valueCase_ == ValueOneofCase.TimeValue) {
        output.WriteRawTag(218, 6);
        output.WriteMessage(TimeValue);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (column_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Column);
      }
      if (NegateComparator != false) {
        output.WriteRawTag(16);
        output.WriteBool(NegateComparator);
      }
      if (Comparator != global::LukeKennedy.LSQL.Net.Comparator.UnknownComparator) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Comparator);
      }
      if (valueCase_ == ValueOneofCase.StringValue) {
        output.WriteRawTag(170, 6);
        output.WriteString(StringValue);
      }
      if (valueCase_ == ValueOneofCase.Int64Value) {
        output.WriteRawTag(176, 6);
        output.WriteInt64(Int64Value);
      }
      if (valueCase_ == ValueOneofCase.Uint64Value) {
        output.WriteRawTag(184, 6);
        output.WriteUInt64(Uint64Value);
      }
      if (valueCase_ == ValueOneofCase.DoubleValue) {
        output.WriteRawTag(193, 6);
        output.WriteDouble(DoubleValue);
      }
      if (valueCase_ == ValueOneofCase.BoolValue) {
        output.WriteRawTag(200, 6);
        output.WriteBool(BoolValue);
      }
      if (valueCase_ == ValueOneofCase.BytesValue) {
        output.WriteRawTag(210, 6);
        output.WriteBytes(BytesValue);
      }
      if (valueCase_ == ValueOneofCase.TimeValue) {
        output.WriteRawTag(218, 6);
        output.WriteMessage(TimeValue);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (column_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Column);
      }
      if (NegateComparator != false) {
        size += 1 + 1;
      }
      if (Comparator != global::LukeKennedy.LSQL.Net.Comparator.UnknownComparator) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Comparator);
      }
      if (valueCase_ == ValueOneofCase.StringValue) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(StringValue);
      }
      if (valueCase_ == ValueOneofCase.Int64Value) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(Int64Value);
      }
      if (valueCase_ == ValueOneofCase.Uint64Value) {
        size += 2 + pb::CodedOutputStream.ComputeUInt64Size(Uint64Value);
      }
      if (valueCase_ == ValueOneofCase.DoubleValue) {
        size += 2 + 8;
      }
      if (valueCase_ == ValueOneofCase.BoolValue) {
        size += 2 + 1;
      }
      if (valueCase_ == ValueOneofCase.BytesValue) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(BytesValue);
      }
      if (valueCase_ == ValueOneofCase.TimeValue) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(TimeValue);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Field other) {
      if (other == null) {
        return;
      }
      if (other.column_ != null) {
        if (column_ == null) {
          Column = new global::LukeKennedy.LSQL.Net.ColumnID();
        }
        Column.MergeFrom(other.Column);
      }
      if (other.NegateComparator != false) {
        NegateComparator = other.NegateComparator;
      }
      if (other.Comparator != global::LukeKennedy.LSQL.Net.Comparator.UnknownComparator) {
        Comparator = other.Comparator;
      }
      switch (other.ValueCase) {
        case ValueOneofCase.StringValue:
          StringValue = other.StringValue;
          break;
        case ValueOneofCase.Int64Value:
          Int64Value = other.Int64Value;
          break;
        case ValueOneofCase.Uint64Value:
          Uint64Value = other.Uint64Value;
          break;
        case ValueOneofCase.DoubleValue:
          DoubleValue = other.DoubleValue;
          break;
        case ValueOneofCase.BoolValue:
          BoolValue = other.BoolValue;
          break;
        case ValueOneofCase.BytesValue:
          BytesValue = other.BytesValue;
          break;
        case ValueOneofCase.TimeValue:
          if (TimeValue == null) {
            TimeValue = new global::Google.Protobuf.WellKnownTypes.Timestamp();
          }
          TimeValue.MergeFrom(other.TimeValue);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (column_ == null) {
              Column = new global::LukeKennedy.LSQL.Net.ColumnID();
            }
            input.ReadMessage(Column);
            break;
          }
          case 16: {
            NegateComparator = input.ReadBool();
            break;
          }
          case 24: {
            Comparator = (global::LukeKennedy.LSQL.Net.Comparator) input.ReadEnum();
            break;
          }
          case 810: {
            StringValue = input.ReadString();
            break;
          }
          case 816: {
            Int64Value = input.ReadInt64();
            break;
          }
          case 824: {
            Uint64Value = input.ReadUInt64();
            break;
          }
          case 833: {
            DoubleValue = input.ReadDouble();
            break;
          }
          case 840: {
            BoolValue = input.ReadBool();
            break;
          }
          case 850: {
            BytesValue = input.ReadBytes();
            break;
          }
          case 858: {
            global::Google.Protobuf.WellKnownTypes.Timestamp subBuilder = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            if (valueCase_ == ValueOneofCase.TimeValue) {
              subBuilder.MergeFrom(TimeValue);
            }
            input.ReadMessage(subBuilder);
            TimeValue = subBuilder;
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (column_ == null) {
              Column = new global::LukeKennedy.LSQL.Net.ColumnID();
            }
            input.ReadMessage(Column);
            break;
          }
          case 16: {
            NegateComparator = input.ReadBool();
            break;
          }
          case 24: {
            Comparator = (global::LukeKennedy.LSQL.Net.Comparator) input.ReadEnum();
            break;
          }
          case 810: {
            StringValue = input.ReadString();
            break;
          }
          case 816: {
            Int64Value = input.ReadInt64();
            break;
          }
          case 824: {
            Uint64Value = input.ReadUInt64();
            break;
          }
          case 833: {
            DoubleValue = input.ReadDouble();
            break;
          }
          case 840: {
            BoolValue = input.ReadBool();
            break;
          }
          case 850: {
            BytesValue = input.ReadBytes();
            break;
          }
          case 858: {
            global::Google.Protobuf.WellKnownTypes.Timestamp subBuilder = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            if (valueCase_ == ValueOneofCase.TimeValue) {
              subBuilder.MergeFrom(TimeValue);
            }
            input.ReadMessage(subBuilder);
            TimeValue = subBuilder;
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
